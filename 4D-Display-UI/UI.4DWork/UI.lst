file C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Gen4-uLCD-24PT.fnc

000001  000001  #platform "Gen4-uLCD-24PT"
000002  000001  #platform "Gen4-uLCD-24PT"
000003  000008  */
000004  000009      #constant Gen4_ULCD_24PT
000005  000009      #constant Gen4_ULCD_24PT
000006  000010        
000007  000011      #IFNOT EXISTS PICASO_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\PicasoFunctions.fnc

000008  000012          #inherit "PicasoFunctions.fnc"          // inherit the generic functions
000009  000012          #inherit "PicasoFunctions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for PicasoGFX2 platforms
000012  000003        
000013  000004  #constant PICASO_FUNCTIONS
000014  000004  #constant PICASO_FUNCTIONS
000015  000005        
000016  000006        
000017  000007  #CONST
000018  000017  #END
000019  000018        
000020  000019  #CONST
000021  000025  #END
000022  000026        
000023  000027        
000024  000028  #CONST
000025  000040  #END
000026  000041        
000027  000042        
000028  000043  #CONST
000029  000208  #END
000030  000209        
000031  000210        
000032  000211  // baud divisor rates for setbaud(n);
000033  000212  #CONST
000034  000234  #END
000035  000235        
000036  000236        
000037  000237        
000038  000238        
000039  000243  */
000040  000244        
000041  000245        
000042  000246  //==============================================//
000043  000247  // EVE bios functions                           //
000044  000248  //==============================================//
000045  000249                                                  //
000046  000250  func serin(), 1;                // read a byte from COM0
000047  000251  // Syntax: serin();
000048  000252  // Usage : char := serin();
000049  000253  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
000050  000254  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
000051  000255  //     : The default Baud Rate is 115,200 bits per second or 115,200 baud. The baud rate can be
000052  000256  //     : changed under program control by using the setbaud(...) or the com_SetBaud(...) function.
000053  000257  //     : Returns: -1 if no character is available
000054  000258  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
000055  000259  //     : Returns: positive value 0 to 255 for a valid character received
000056  000260        
000057  000261  func putch("char"), 0;                // write single char to current output device
000058  000262  // Syntax: putch("char");
000059  000263  // Usage : putch("A");
000060  000264  // Notes : Transmits a single byte from the Serial Port COM0. The transmission format is:
000061  000265  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
000062  000266  //     : The default Baud Rate is 115,200 bits per second or 115,200 baud. The baud rate can be
000063  000267  //     : changed under program control by using the setbaud(...) or the com_SetBaud(...) function.
000064  000268  //     : The arguments can be a variable, array element, expression or constant
000065  000269        
000066  000270  func serout("char"), 0;                // write a byte to COM0
000067  000271  // Syntax: serout1("char");
000068  000272  // Usage : serout1(ch);
000069  000273  // Notes : send character to COM1
000070  000274        
000071  000275  func setbaud("baudnum"), 0;            // set baud rate of COM0
000072  000276  // Syntax: setbaud(baud_number);
000073  000277  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
000074  000278  // *Notes : argument specifies the baud rate using pre-defined constant.
000075  000279  //       : The pre-defined constant is a value of 0-19 , and internally
000076  000280  //       : this is used as a table pointer to get the baud rate divisor
000077  000281  //       : value for one of the 20 selected baud rates, control is then
000078  000282  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
000079  000283  //       : The pre-defined constants equate to a value of 0-19.
000080  000284  //       : If a value other than 0-19 is used, a run time error (eror 25)
000081  000285  //       : will occur.
000082  000286        
000083  000287  func to("device"), 1;                // output device redirection
000084  000288  // Syntax: to(outstream);
000085  000289  // Usage : to(APPEND); putstr("TWO ");
000086  000290  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000087  000291  //     :
000088  000292  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000089  000293  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000090  000294  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000091  000295  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000092  000296  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000093  000297  //     : completed its action. The APPEND argument is used to send the printed output to the same
000094  000298  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000095  000299  //     : sequential data to a media stream.
000096  000300  //     :
000097  000301  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000098  000302  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000099  000303  //     :                            appended to user memory if previous redirection was to an array.
000100  000304  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000101  000305  //     : TEXT           0xFF08      Output is directed to the screen (default).
000102  000306  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000103  000307  //     : I2C            0xF820      Output is directed to the I2C port.
000104  000308  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000105  000309        
000106  000310        
000107  000311  func pause("milliseconds"), 0;            // blocking delay
000108  000312  // Syntax: pause(milliseconds);
000109  000313  // Usage : pause(1000);                //pause for 1 second
000110  000314  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000111  000315        
000112  000316  func putnum("arg1","arg2"), 1;            // print number to current output device
000113  000317  // Syntax: putnum(format, value);
000114  000318  // Usage : var := putnum(HEX, val);
000115  000319  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000116  000320  //     : Format: A constant that specifies the number format
000117  000321  //     : Value : The number to be printed
000118  000322  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000119  000323  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000120  000324  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000121  000325  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000122  000326  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000123  000327  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000124  000328  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000125  000329  //     :                                     BIN6     BIN6Z     BIN6ZB
000126  000330  //     :                                     BIN7     BIN7Z     BIN7ZB
000127  000331  //     :                                     BIN8     BIN8Z     BIN8ZB
000128  000332  //     :                                     BIN9     BIN9Z     BIN9ZB
000129  000333  //     :                                     BIN10     BIN10Z     BIN10ZB
000130  000334  //     :                                     BIN11     BIN11Z     BIN11ZB
000131  000335  //     :                                     BIN12     BIN12Z     BIN12ZB
000132  000336  //     :                                     BIN13     BIN13Z     BIN13ZB
000133  000337  //     :                                     BIN14     BIN14Z     BIN14ZB
000134  000338  //     :                                     BIN15     BIN15Z     BIN15ZB
000135  000339  //     :                                     BIN16     BIN16Z     BIN16ZB
000136  000340  //     :
000137  000341  //     : bit 15 Leading spaces (1=space before signed number, 0=No space)
000138  000342  //     : bit 14 sign bit (0=signed, 1=unsigned)
000139  000343  //     : bit 13 Blanking (1=Leading zero blanking, 0=Show Zeros)
000140  000344  //     : bit 12 Leading zeros (1=Zeros included, 0=Zeros suppressed)
000141  000345  //     : bits 11-8 Displayed digit quantity
000142  000346  //     : bits 7-5 Reserved
000143  000347  //     : bits 4-0 Number base (usually 2,10 or 16)
000144  000348        
000145  000349        
000146  000350  func translate("arg1","arg2","arg3","arg4"), 1; // list translator (internal use only, not usable)
000147  000351        
000148  000352  func putstr("string"), 1;                       // print string to current output device
000149  000353  // Syntax: putstr(pointer);
000150  000354  // Usage : putstr("HELLO\n");
000151  000355  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000152  000356  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000153  000357  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000154  000358  //       : The output of putstr can be redirected to the communications port, the media, or memory
000155  000359  //       : using the to(...); function.
000156  000360  //       : A string constant is automatically terminated with a zero.
000157  000361  //       : A string in a data statement is not automatically terminated with a zero.
000158  000362  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000159  000363  //       : element packs 1 or 2 characters.
000160  000364        
000161  000365        
000162  000366  func strlen("varAddress"), 1;                   // return length of a var packed string in character units
000163  000367  // Syntax: strlen("varAddress);
000164  000368  // Usage : strlen("HELLO\n");
000165  000369  // Notes : gives the length of a string that is packed into regular var array
000166  000370  //       : Use str_Length(ptr)  for string pointer mode
000167  000371        
000168  000372        
000169  000373  //==============================================//
000170  000374  // Memory Access Function Prototypes            //
000171  000375  //==============================================//
000172  000376                                                  //
000173  000377  func peekW("address"), 1;                       // read a word from system memory
000174  000378  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000175  000379  // refer to address map of internal variables   //
000176  000380  //==============================================//
000177  000381  // Math Functions                               //
000178  000382  //==============================================//
000179  000383                                                  //
000180  000384  func ABS("value"), 1;                           // return a positive number
000181  000385  // Syntax: ABS(value);
000182  000386  // Usage : var := ABS(arg);
000183  000387  // Notes : Returns the absolute value of an argument
000184  000388        
000185  000389  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000186  000390  // Syntax: MIN(value1, value2);
000187  000391  // Usage : var := MIN(arg1, arg2);
000188  000392  // Notes : Returns the minimum of 2 arguments
000189  000393        
000190  000394  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000191  000395  // Syntax: MAX(value1, value2);
000192  000396  // Usage : var := MAX(arg1, arg2);
000193  000397  // Notes : Returns the maximum of 2 arguments
000194  000398        
000195  000399  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000196  000400  // Syntax: SWAP(&var1, &var2);
000197  000401  // Usage : SWAP(&var1, &var2);
000198  000402  // Notes : Swaps the contents of 2 variables or memory locations
000199  000403        
000200  000404  func SIN("angle"), 1;                           // return SIN of angle
000201  000405  // Syntax: SIN(angle);
000202  000406  // Usage : var := SIN(arg);
000203  000407  // Notes : Returns the sine in radians of an argument in degrees
000204  000408  //       : the returned value range is from 127 to -127. The real
000205  000409  //       : cosine values vary from 1.0 to -1.0 so appropriate
000206  000410  //       : scaling must be done in user code.
000207  000411        
000208  000412  func COS("angle"), 1;                           // return COS of angle
000209  000413  // Syntax: COS(angle);
000210  000414  // Usage : var := COS(arg);
000211  000415  // Notes : Returns the cosine in radians of an argument in degrees
000212  000416  //       : the returned value range is from 127 to -127. The real
000213  000417  //       : cosine values vary from 1.0 to -1.0 so appropriate
000214  000418  //       : scaling must be done in user code.
000215  000419        
000216  000420  func RAND(), 1;                                 // return a pseudo random number
000217  000421  // Syntax: RAND();
000218  000422  // Usage : var := RAND();
000219  000423  // Notes : Returns a random number between 0 and 0xFFFF.
000220  000424  //       : The random number generator must first be seeded
000221  000425  //       : by using the SEED(number) function.
000222  000426        
000223  000427  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000224  000428  // Syntax: SEED(number);
000225  000429  // Usage : SEED(arg);
000226  000430  // Notes : Seeds the random number generator.
000227  000431        
000228  000432  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000229  000433  // Syntax: OVF();
000230  000434  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000231  000435  //       : hiWord := OVF();
000232  000436  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000233  000437        
000234  000438  func SQRT("number"), 1;                         // return square root of a number
000235  000439  // Syntax: SQRT(number);
000236  000440  // Usage : SQRT(arg);
000237  000441  // Notes : Returns the integer square root of a number.
000238  000442  //------------------------------------------------------------------//
000239  000443  //          Text Related Function Prototypes
000240  000444  //------------------------------------------------------------------//
000241  000445        
000242  000446  func txt_MoveCursor("line", "column"), 0;
000243  000447  // Syntax: txt_SetCursor(line, column);
000244  000448  // Usage : txt_SetCursor(arg1, arg2);
000245  000449  // Notes : Moves the text Cursor to a new screen position set by
000246  000450  //       : line,column parameters.
000247  000451        
000248  000452  func txt_Set("mode", "value"), 0;
000249  000453  // Syntax: txt_Set(mode, value);
000250  000454  // Usage : txt_Set(arg1, arg2);
000251  000455  // Returns : Original value before the change
000252  000456  // Notes : Sets various text related parameters used by other functions
000253  000457  //       : This allows the features to be set programatically with a
000254  000458  //       : single function call.It is strongly recommended to use the
000255  000459  //       : pre-defined constants rather than the mode numbers.
000256  000460  //       : NB:- Although it is often required to be able to set text
000257  000461  //       : functions with a single function call for graphics engine
000258  000462  //       : related functions, there is a complete set of single parameter
000259  000463  //       : shortcut functions that have exactly the same function as
000260  000464  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000261  000465  //       :
000262  000466  //       : mode = TEXT_COLOUR (mode 0)
000263  000467  //       : txt_Set(TEXT_COLOUR, value);
000264  000468  //       : value = 0 to 0xFFFF, Black to White
000265  000469  //       : Sets the Text colour for the display
000266  000470  //       : Default = LIME.
000267  000471  //       :
000268  000472  //       : mode = TEXT_HIGHLIGHT (mode 1)
000269  000473  //       : txt_Set(TEXT_HIGHLIGHT, value);
000270  000474  //       : value = 0 to 0xFFFF, Black to White
000271  000475  //       : Sets the Text background colour for the display. Effective
000272  000476  //       : when text mode is Opaque.
000273  000477  //       : Default = BLACK.
000274  000478  //       :
000275  000479  //       : mode = FONT_ID (mode 2)
000276  000480  //       : txt_Set(FONT_ID, value);
000277  000481  //       : value = FONT1, FONT2 or FONT3 for internal fonts
000278  000482  //       : else this value is the name of a font included
000279  000483  //       : in a users program in a data statement.
000280  000484  //       : Default = FONT SIZE 3.
000281  000485  //       :
000282  000486  //       : mode = TEXT_WIDTH  (mode 3)
000283  000487  //       : txt_Set(TEXT_WIDTH, value);
000284  000488  //       : value = 1 to 16
000285  000489  //       : Sets the Text Width multiplier
000286  000490  //       : text will be printed magnified horizontally
000287  000491  //       : by this factor, Default = 1.
000288  000492  //       :
000289  000493  //       : mode = TEXT_HEIGHT  (mode 4)
000290  000494  //       : txt_Set(TEXT_HEIGHT, value);
000291  000495  //       : value = 1 to 16
000292  000496  //       : Sets the Text Height multiplier
000293  000497  //       : text will be printed magnified vertically
000294  000498  //       : by this factor, Default = 1.
000295  000499  //       :
000296  000500  //       : mode = TEXT_XGAP  (mode 5)
000297  000501  //       : txt_Set(TEXT_XGAP, value);
000298  000502  //       : value = 1 to 32
000299  000503  //       : Sets the horizontal gap between characters
000300  000504  //       : The gap is in pixel units, Default = 0
000301  000505  //       :
000302  000506  //       : mode = TEXT_YGAP  (mode 6)
000303  000507  //       : txt_Set(TEXT_YGAP, value);
000304  000508  //       : value = 1 to 32
000305  000509  //       : Sets the vertical gap below characters
000306  000510  //       : The gap is in pixel units, Default = 0
000307  000511  //       :
000308  000512  //       : mode = TEXT_PRINTDELAY  (mode 7) DEPRECATED
000309  000513  //       : txt_Set(TEXT_PRINTDELAY, value);
000310  000514  //       : value = 0 to 255
000311  000515  //       : Sets the delay time (in ms) during character
000312  000516  //       : printing to give a 'teletype' like effect.
000313  000517  //       : Often used to attract attention to a string
000314  000518  //       : being printed which can often be missed if
000315  000519  //       : just suddenly appearing or changing.
000316  000520  //       : Default = 0 ms.
000317  000521  //       :
000318  000522  //       : mode = TEXT_OPACITY (mode 8)
000319  000523  //       : txt_Set(TEXT_OPACITY, value);
000320  000524  //       : value = TRANSPARENT (0) = Text Trasparent
000321  000525  //       : value = OPAQUE (1) = Text Opaque
000322  000526  //       : Sets the Opacity/Transparency of the text
000323  000527  //       : Default = 0 or TRANSPARENT
000324  000528  //       :
000325  000529  //       : mode = TEXT_BOLD (mode 9)
000326  000530  //       : txt_Set(TEXT_BOLD, value);
000327  000531  //       : value = dont care
000328  000532  //       : Sets Bold Text mode for the next string or char
000329  000533  //       : The feature automatically resets after printing
000330  000534  //       : using putstr or print has completed
000331  000535  //       :
000332  000536  //       : mode = TEXT_ITALIC (mode 10)
000333  000537  //       : txt_Set(TEXT_ITALIC, value);
000334  000538  //       : value = dont care
000335  000539  //       : Sets Italic Text mode for the next string or char
000336  000540  //       : The feature automatically resets after printing
000337  000541  //       : using putstr or print has completed
000338  000542        
000339  000543  //       : mode = TEXT_INVERSE (mode 11)
000340  000544  //       : txt_Set(TEXT_INVERSE, value);
000341  000545  //       : value = dont care
000342  000546  //       : Sets Inverse Text mode for the next string or char
000343  000547  //       : The feature automatically resets after printing
000344  000548  //       : using putstr or print has completed
000345  000549  //       :
000346  000550  //       : mode = TEXT_UNDERLINED (mode 12)
000347  000551  //       : txt_Set(TEXT_UNDERLINED, value);
000348  000552  //       : value = dont care
000349  000553  //       : Sets Underlined Text mode for the next string or char
000350  000554  //       : The feature automatically resets after printing
000351  000555  //       : using putstr or print has completed
000352  000556  //       :
000353  000557  //       : mode = TEXT_ATTRIBUTES (mode 13)
000354  000558  //       : txt_Set(TEXT_ATTRIBUTES, value);
000355  000559  //       : value = bits are defined as:
000356  000560  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000357  000561  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000358  000562  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000359  000563  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000360  000564  //       : Allows a combination of text attributes to be defined together
000361  000565  //       : by 'or'ing the bits together.
000362  000566  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000363  000567  //       : The feature automatically resets after printing
000364  000568  //       : using putstr or print has completed.
000365  000569  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000366  000570  //       :
000367  000571  //       : mode = TEXT_WRAP (mode 14)
000368  000572  //       : txt_Set(TEXT_WRAP , value);
000369  000573  //       : Sets the position where text wrap will occur
000370  000574  //       : The feature automatically resets when screen
000371  000575  //       : mode is changed. If the value is set to 0,
000372  000576  //       : text wrap is turned off.
000373  000577  //       : of the current screen. Default value is 0
000374  000578  // Notes : The value is in pixel units.
000375  000579  //       :
000376  000580        
000377  000581  //       : txt_Set mode 15 reserved for future use
000378  000582  //       :
000379  000583        
000380  000584        
000381  000585        
000382  000586  //=====================================================//
000383  000587  // Single parameter short-cuts                         //
000384  000588  // for the txt_Set functions                           //
000385  000589  // These functions return the existing value before    //
000386  000590  // the change is made.                                 //
000387  000591  //=====================================================//
000388  000592  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000389  000593  func txt_BGcolour("colour"), 1;             // 1  text background colour
000390  000594  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000391  000595  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000392  000596  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000393  000597  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000394  000598  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000395  000599  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000396  000600  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000397  000601  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000398  000602  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000399  000603  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000400  000604  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000401  000605  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000402  000606  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000403  000607  func _1F(), 0;                              // 15 text (reserved DO NOT REMOVE)
000404  000608        
000405  000609        
000406  000610  //------------------------------------------------------------------//
000407  000611  //                 Hardware Function Prototypes
000408  000612  //------------------------------------------------------------------//
000409  000613        
000410  000614  // I/O Pin reference:-
000411  000615  //
000412  000616  //    IO1_PIN           is pin 2 of J1
000413  000617  //    IO2_PIN           is pin 1 of J1
000414  000618  //    IO3_PIN           is pin 3 of J1
000415  000619  //    IO4_PIN           is pin 5 of J1 (also used for BUS_RD)
000416  000620  //    IO5_PIN           is pin 9 of J2 (also used for BUS_WR)
000417  000621  //    BUS_RD_PIN        is pin 5 of J1 (alias IO4_PIN)
000418  000622  //    BUS_WR_PIN        is pin 9 of J2 (alias IO5_PIN)
000419  000623  //    BUS_0             is pin 27 of J1
000420  000624  //    BUS_1             is pin 25 of J1
000421  000625  //    BUS_2             is pin 23 of J1
000422  000626  //    BUS_3             is pin 21 of J1
000423  000627  //    BUS_4             is pin 19 of J1
000424  000628  //    BUS_5             is pin 17 of J1
000425  000629  //    BUS_6             is pin 13 of J2
000426  000630  //    BUS_7             is pin 11 of J2
000427  000631  //    BACKLITE          is backlite control pin
000428  000632  //    AUDIO_ENABLE      is amplifier chip control pin
000429  000633        
000430  000634  func pin_Set("mode", "pin"), 1;            // set pin to required mode
000431  000635  // Syntax: pin_Set(mode, pin);
000432  000636  // Usage : pin_Set(arg1, arg2);
000433  000637  // Notes : Sets the appropriate pins to Inputs or Outputs
000434  000638  //       : returns true if the pin number is legal (usually ignored)
000435  000639  //       :
000436  000640  //       : mode = 0 : Set Pin to Output
000437  000641  //       : pin_Set(0, pin);
000438  000642  //       : pin_Set(OUTPUT, pin);
000439  000643  //       : pin = 1  : set IO1_PIN to output (pin 2 J1)
000440  000644  //       : pin = 2  : set IO2_PIN to output (pin 1 J1)
000441  000645  //       : pin = 3  : set IO3_PIN to output (pin 3 J1)
000442  000646  //       : pin = 4  : set IO4_PIN to output (pin 5 J1, also used for BUS_RD)
000443  000647  //       : pin = 5  : set IO5_PIN to output (pin 9 J2, also used for BUS_WR)
000444  000648  //       : (pin 6,7 are BACKLITE and AMP control and are permanemtly outputs which can't be altered)
000445  000649  //       : pin = 8  : set BUS_0   to output (pin 27 of J1)
000446  000650  //       : pin = 9  : set BUS_1   to output (pin 25 of J1)
000447  000651  //       : pin = 10 : set BUS_2   to output (pin 23 of J1)
000448  000652  //       : pin = 11 : set BUS_3   to output (pin 21 of J1)
000449  000653  //       : pin = 12 : set BUS_4   to output (pin 19 of J1)
000450  000654  //       : pin = 13 : set BUS_5   to output (pin 17 of J1)
000451  000655  //       : pin = 14 : set BUS_6   to output (pin 13 of J2)
000452  000656  //       : pin = 15 : set BUS_7   to output (pin 11 of J2)
000453  000657  //       : Sets the desired pin to be used as an Output.
000454  000658  //       :
000455  000659  //       : mode = 1 : Set Pin to Input
000456  000660  //       : pin_Set(1, pin);
000457  000661  //       : pin_Set(INPUT, pin);
000458  000662  //       : pin = 1  : set IO1_PIN to input (pin 2 J1)
000459  000663  //       : pin = 2  : set IO2_PIN to input (pin 1 J1)
000460  000664  //       : pin = 3  : set IO3_PIN to input (pin 3 J1)
000461  000665  //       : pin = 4  : set IO4_PIN to input (pin 5 J1, also used for BUS_RD)
000462  000666  //       : pin = 5  : set IO5_PIN to input (pin 9 J2, also used for BUS_WR)
000463  000667  //       : (pin 6,7 are BACKLITE and AMP control and are permanemtly outputs which can't be altered)
000464  000668  //       : pin = 8  : set BUS_0   to input (pin 27 of J1)
000465  000669  //       : pin = 9  : set BUS_1   to input (pin 25 of J1)
000466  000670  //       : pin = 10 : set BUS_2   to input (pin 23 of J1)
000467  000671  //       : pin = 11 : set BUS_3   to input (pin 21 of J1)
000468  000672  //       : pin = 12 : set BUS_4   to input (pin 19 of J1)
000469  000673  //       : pin = 13 : set BUS_5   to input (pin 17 of J1)
000470  000674  //       : pin = 14 : set BUS_6   to input (pin 13 of J2)
000471  000675  //       : pin = 15 : set BUS_7   to input (pin 11 of J2)
000472  000676  //       : Sets the desired pin to be used as an Input.
000473  000677        
000474  000678  func pin_HI("pin"), 1;                    // set pin to logic '1'
000475  000679  // Syntax: pin_HI(pin);
000476  000680  // Usage : pin_HI(arg);
000477  000681  // Notes : Outputs a logic "High" (3.3V) on the appropriate
000478  000682  //       : pin that was previously selected as an Output.
000479  000683  //       : returns true if the pin number is legal (usually ignored)
000480  000684  //       :
000481  000685  //       : pin = 1  : set IO1_PIN to "High" level (pin 2 of J1)
000482  000686  //       : pin = 2  : set IO2_PIN to "High" level (pin 1 of J1)
000483  000687  //       : pin = 3  : set IO3_PIN to "High" level (pin 3 of J1)
000484  000688  //       : pin = 4  : set IO4_PIN to "High" level (pin 5 of J1, also used for BUS_RD)
000485  000689  //       : pin = 5  : set IO5_PIN to "High" level (pin 9 of J2, also used for BUS_WR)
000486  000690  //       : pin = 6  : set DCENB pin to "High" level (BACKLITE ON)
000487  000691  //       : pin = 7  : set AUDIO_ENABL pin to "High" level (AMP OFF)
000488  000692  //       : pin = 8  : set BUS_0   to "High" level (pin 27 of J1)
000489  000693  //       : pin = 9  : set BUS_1   to "High" level (pin 25 of J1)
000490  000694  //       : pin = 10 : set BUS_2   to "High" level (pin 23 of J1)
000491  000695  //       : pin = 11 : set BUS_3   to "High" level (pin 21 of J1)
000492  000696  //       : pin = 12 : set BUS_4   to "High" level (pin 19 of J1)
000493  000697  //       : pin = 13 : set BUS_5   to "High" level (pin 17 of J1)
000494  000698  //       : pin = 14 : set BUS_6   to "High" level (pin 13 of J2)
000495  000699  //       : pin = 15 : set BUS_7   to "High" level (pin 11 of J2)
000496  000700        
000497  000701  func pin_LO("pin"), 1;                    // set pin to logic '0'
000498  000702  // Syntax: pin_LO(pin);
000499  000703  // Usage : pin_LO(arg);
000500  000704  // Notes : Outputs a logic "Low" (0V) on the appropriate
000501  000705  //       : pin that was previously selected as an Output.
000502  000706  //       : returns true if the pin number is legal (usually ignored)
000503  000707  //       :
000504  000708  //       : pin = 1 : set IO1_PIN to "Low" level (pin 2 of J1)
000505  000709  //       : pin = 2 : set IO2_PIN to "Low" level (pin 1 of J1)
000506  000710  //       : pin = 3 : set IO3_PIN to "Low" level (pin 3 of J1)
000507  000711  //       : pin = 4 : set IO4_PIN to "Low" level (pin 5 of J1, also used for BUS_RD)
000508  000712  //       : pin = 5 : set IO5_PIN to "Low" level (pin 9 of J2, also used for BUS_WR)
000509  000713  //       : pin = 6 : set DCENB pin to "Low" level (BACKLITE)
000510  000714  //       : pin = 7 : set AUDIO_ENABL pin to "Low" level (AMP ON)
000511  000715  //       : pin = 8  : set BUS_0  to "Low" level (pin 27 of J1)
000512  000716  //       : pin = 9  : set BUS_1  to "Low" level (pin 25 of J1)
000513  000717  //       : pin = 10 : set BUS_2  to "Low" level (pin 23 of J1)
000514  000718  //       : pin = 11 : set BUS_3  to "Low" level (pin 21 of J1)
000515  000719  //       : pin = 12 : set BUS_4  to "Low" level (pin 19 of J1)
000516  000720  //       : pin = 13 : set BUS_5  to "Low" level (pin 17 of J1)
000517  000721  //       : pin = 14 : set BUS_6  to "Low" level (pin 13 of J2)
000518  000722  //       : pin = 15 : set BUS_7  to "Low" level (pin 11 of J2)
000519  000723        
000520  000724  func pin_Read("pin"), 1;                // read pin, logic or analogue
000521  000725  // Syntax: pin_Read(pin);
000522  000726  // Usage : arg1 := pin_Read(arg2);
000523  000727  // Notes : Reads the logic state of the appropriate
000524  000728  //       : pin that was previously selected as an Input.
000525  000729  //       :
000526  000730  //       : pin = 1  : Read the state of IO1_PIN (pin 2 of J1)
000527  000731  //       : pin = 2  : Read the state of IO2_PIN (pin 1 of J1)
000528  000732  //       : pin = 3  : Read the state of IO3_PIN (pin 3 of J1)
000529  000733  //       : pin = 4  : Read the state of IO4_PIN (pin 5 of J1, also used for BUS_RD)
000530  000734  //       : pin = 5  : Read the state of IO5_PIN (pin 9 of J2, also used for BUS_WR)
000531  000735  //       : pin = 6  : Read the state of DCENB pin to "Low" level (BACKLITE)
000532  000736  //       : pin = 7  : Read the state of AUDIO_ENABL pin to "Low" level (AMP ON)
000533  000737  //       : pin = 8  : Read the state of BUS_0   (pin 27 of J1)
000534  000738  //       : pin = 9  : Read the state of BUS_1   (pin 25 of J1)
000535  000739  //       : pin = 10 : Read the state of BUS_2   (pin 23 of J1)
000536  000740  //       : pin = 11 : Read the state of BUS_3   (pin 21 of J1)
000537  000741  //       : pin = 12 : Read the state of BUS_4   (pin 19 of J1)
000538  000742  //       : pin = 13 : Read the state of BUS_5   (pin 17 of J1)
000539  000743  //       : pin = 14 : Read the state of BUS_6   (pin 13 of J2)
000540  000744  //       : pin = 15 : Read the state of BUS_7   (pin 11 of J2)
000541  000745  //       : Returns a 0 (logic low) or 1 (logic high).
000542  000746        
000543  000747        
000544  000748  //------------------------------------------------------------------//
000545  000749  //                 P1 module BUS I/O control
000546  000750  //------------------------------------------------------------------//
000547  000751        
000548  000752  func bus_In(), 1;
000549  000753  // Syntax: bus_In();
000550  000754  // Usage : arg1 := bus_In();
000551  000755  // Notes : Read the 8bit wide bus into the lower 8 bits of arg1.
000552  000756  //       : The upper 8 bits of arg1 are set to 0.
000553  000757  //       : the BUS_RD and BUS_WR pins are not affected.
000554  000758  //       :
000555  000759  //       : BUS_0 is pin 27 of J1
000556  000760  //       : BUS_1 is pin 25 of J1
000557  000761  //       : BUS_2 is pin 23 of J1
000558  000762  //       : BUS_3 is pin 21 of J1
000559  000763  //       : BUS_4 is pin 19 of J1
000560  000764  //       : BUS_5 is pin 17 of J1
000561  000765  //       : BUS_6 is pin 13 of J2
000562  000766  //       : BUS_7 is pin 11 of J2
000563  000767        
000564  000768  func bus_Out("var"), 0;
000565  000769  // Syntax: bus_Out(var);
000566  000770  // Usage : bus_Out(arg1);
000567  000771  // Notes : The lower 8 bits of arg1 are placed on the 8bit wide bus.
000568  000772  //       : The upper 8 bits of arg1 are ignored.
000569  000773  //       : the BUS_RD and BUS_WR pins are not affected.
000570  000774  //       : NB:- any BUS pins that are set to inputs are not affected.
000571  000775  //       :
000572  000776  //       : BUS_0 is pin 27 of J1
000573  000777  //       : BUS_1 is pin 25 of J1
000574  000778  //       : BUS_2 is pin 23 of J1
000575  000779  //       : BUS_3 is pin 21 of J1
000576  000780  //       : BUS_4 is pin 19 of J1
000577  000781  //       : BUS_5 is pin 17 of J1
000578  000782  //       : BUS_6 is pin 13 of J2
000579  000783  //       : BUS_7 is pin 11 of J2
000580  000784        
000581  000785  func bus_Set("var"), 0;
000582  000786  // Syntax: bus_Set(var);
000583  000787  // Usage : bus_Set(arg1);
000584  000788  // Notes : The lower 8 bits of arg1 are placed in the BUS direction register.
000585  000789  //       : a '1' sets a pin to be an input, a '0' sets a pin to be output.
000586  000790  //       : The upper 8 bits of arg1 are ignored.
000587  000791  //       : the BUS_RD and BUS_WR pins are not affected.
000588  000792  //       :
000589  000793  //       : BUS_0 is pin 27 of J1
000590  000794  //       : BUS_1 is pin 25 of J1
000591  000795  //       : BUS_2 is pin 23 of J1
000592  000796  //       : BUS_3 is pin 21 of J1
000593  000797  //       : BUS_4 is pin 19 of J1
000594  000798  //       : BUS_5 is pin 17 of J1
000595  000799  //       : BUS_6 is pin 13 of J2
000596  000800  //       : BUS_7 is pin 11 of J2
000597  000801        
000598  000802  func bus_Write("var"), 0;
000599  000803  // Syntax: bus_Write(var);
000600  000804  // Usage : bus_Write(arg1);
000601  000805  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
000602  000806  //       : a settling delay of approx 50nsec, the BUS_WR pin is strobed
000603  000807  //       : LO for approx 50nsec then set back HI.
000604  000808  //       : The upper 8 bits of arg1 are ignored.
000605  000809  //       : NB:- the BUS_WR pin is automatically pre-set to an output to
000606  000810  //       : ensure BUS write integrity.
000607  000811  //       :
000608  000812  //       : BUS_0 is pin 27 of J1
000609  000813  //       : BUS_1 is pin 25 of J1
000610  000814  //       : BUS_2 is pin 23 of J1
000611  000815  //       : BUS_3 is pin 21 of J1
000612  000816  //       : BUS_4 is pin 19 of J1
000613  000817  //       : BUS_5 is pin 17 of J1
000614  000818  //       : BUS_6 is pin 13 of J2
000615  000819  //       : BUS_7 is pin 11 of J2
000616  000820        
000617  000821  func bus_Read(), 1;
000618  000822  // Syntax: bus_Read();
000619  000823  // Usage : arg1 := bus_Read();
000620  000824  // Notes : The BUS_RD pin set to LO, then, after a settling delay
000621  000825  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
000622  000826  //       : (the upper 8 bits being set to 0)
000623  000827  //       : the BUS_RD pin is then set back to a HI level.
000624  000828  //       : NB:- the BUS_RD pin is automatically pre-set to an output to
000625  000829  //       : ensure BUS write integrity.
000626  000830  //       :
000627  000831  //       : BUS_0 is pin 27 of J1
000628  000832  //       : BUS_1 is pin 25 of J1
000629  000833  //       : BUS_2 is pin 23 of J1
000630  000834  //       : BUS_3 is pin 21 of J1
000631  000835  //       : BUS_4 is pin 19 of J1
000632  000836  //       : BUS_5 is pin 17 of J1
000633  000837  //       : BUS_6 is pin 13 of J2
000634  000838  //       : BUS_7 is pin 11 of J2
000635  000839        
000636  000840        
000637  000841  //------------------------------------------------------------------//
000638  000842  //   Graphics Functions
000639  000843  //------------------------------------------------------------------//
000640  000844  func gfx_Set("mode", "value"), 0;            // set various graphics functions
000641  000845  // Syntax: gfx_Set(mode, value);
000642  000846  // Usage : gfx_Set(arg1, arg2);
000643  000847  // Notes : Sets various graphics parameters used by other functions
000644  000848  //       : This allows the features to be set programatically with a
000645  000849  //       : single function call.It is strongly recommended to use the
000646  000850  //       : pre-defined constants rather than the mode numbers.
000647  000851  //       : NB:- Although it is often required to be able to set graphics
000648  000852  //       : functions with a single function call for graphics engine
000649  000853  //       : related functions, there is a complete set of single parameter
000650  000854  //       : shortcut functions that have exactly the same function as
000651  000855  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
000652  000856  //       :
000653  000857  //       : mode = PEN_SIZE (mode 16)
000654  000858  //       : gfx_Set(PEN_SIZE, value);
000655  000859  //       : value = SOLID (value 0) rectangle and circle objects are solid
000656  000860  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
000657  000861  //       : Sets the mode of the Pen used by most graphics objects
000658  000862  //       :
000659  000863  //       : mode = BACKGROUND_COLOUR (mode 17)
000660  000864  //       : gfx_Set(BACKGROUND_COLOUR, value);
000661  000865  //       : value = 0 to 0xFFFF, Black to White
000662  000866  //       : Sets the Background colour of the screen
000663  000867  //       :
000664  000868  //       : mode = OBJECT_COLOUR (mode 18)
000665  000869  //       : gfx_Set(OBJECT_COLOUR, value);
000666  000870  //       : value = 0 to 0xFFFF, Black to White
000667  000871  //       : Sets the Object colour used in various functions
000668  000872  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
000669  000873  //       :
000670  000874  //       : mode = CLIPPING (mode 19)
000671  000875  //       : gfx_Set(CLIPPING, value);
000672  000876  //       : value = OFF (value 0) Clipping disabled
000673  000877  //       : value = ON (value 1) Clipping enabled
000674  000878  //       : Enables/Disables the Clipping feature
000675  000879  //       :
000676  000880  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
000677  000881  //       : gfx_Set(TRANSPARENT_COLOUR, value);
000678  000882  //       : value = 0 to 0xFFFF Black to White
000679  000883  //       : Sets Bitmap, Image or Animation Transparency Colour.
000680  000884  //       : NB not implemented
000681  000885  //       :
000682  000886  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
000683  000887  //       : gfx_Set(5, value);
000684  000888  //       : value = OFF (value 0) Transparency disabled
000685  000889  //       : value = ON (value 1) Transparency enabled
000686  000890  //       : Enables/Disables the Transparency feature
000687  000891  //       : NB not implemented
000688  000892  //       :
000689  000893  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
000690  000894  //       : gfx_Set(FRAME_DELAY, value);
000691  000895  //       : value = 0 to 65535 ms
000692  000896  //       : Sets the Video/Animation clip inter-frame delay. This setting will
000693  000897  //       : over-ride the embedded frame delay of the clip. After the event,
000694  000898  //       : the setting will auto disable and if further inter-frame delays need
000695  000899  //       : overriding the setting must be re-issued.
000696  000900  //       :
000697  000901  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
000698  000902  //       : gfx_Set(SCREEN_MODE, value);
000699  000903  //       : value = LANDSCAPE   (value 0)
000700  000904  //       : value = LANDSCAPE_R (value 1)
000701  000905  //       : value = PORTRAIT    (value 2)
000702  000906  //       : value = PORTRAIT_R  (value 3)
000703  000907  //       :
000704  000908  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
000705  000909  //       : gfx_Set(OUTLINE_COLOUR, value);
000706  000910  //       : value = 1 to 0xFFFF, if 0, featre is OFF
000707  000911  //       : Sets the filled Rectangle or Circle objects outline colour
000708  000912  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
000709  000913  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
000710  000914  //       :
000711  000915  //       : Only supports variable contrast for uOLED Modules
000712  000916  //       : mode = CONTRAST (mode 25) : Contrast
000713  000917  //       : gfx_Set(CONTRAST, value);
000714  000918  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
000715  000919  //       : when contrast=0, display is placed in low power mode.
000716  000920  //       : This function should be called with contrast=0 when
000717  000921  //       : powering down the module.
000718  000922  //       :
000719  000923  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
000720  000924  //       : gfx_Set(LINE_PATTERN, value);
000721  000925  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
000722  000926  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
000723  000927  //       : a value of 0 turns the feature off
000724  000928  //       :
000725  000929  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
000726  000930  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
000727  000931  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
000728  000932  //       : NB not implemented, default is COLOUR16
000729  000933  //       :
000730  000934  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
000731  000935  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
000732  000936  //       : sets the button and slider objects bevel width
000733  000937  //       :
000734  000938  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
000735  000939  //       : gfx_Set(BEVEL_SHADOW , 5);
000736  000940  //       : sets the button and slider objects darken and lighten depth for the bevel colour
000737  000941  //       :
000738  000942  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
000739  000943  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
000740  000944  //       : sets the origin of drawn objects to a position other than 0,0
000741  000945  //       :
000742  000946  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
000743  000947  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
000744  000948  //       : sets the origin of drawn objects to a position other than 0,0
000745  000949        
000746  000950        
000747  000951  func gfx_Cls(), 0;                    // clear the screen
000748  000952  // Syntax: gfx_Cls();
000749  000953  // Usage : gfx_Cls();
000750  000954  // Notes : Clears the screen with current background colour
000751  000955        
000752  000956  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
000753  000957  // Syntax: gfx_MoveTo(x, y);
000754  000958  // Usage : gfx_MoveTo(arg1, arg2);
000755  000959  // Notes : Moves the origin to a new x,y position
000756  000960        
000757  000961  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
000758  000962  // Syntax: gfx_MoveRel(x, y);
000759  000963  // Usage : gfx_MoveRel(arg1, arg2);
000760  000964  // Notes : Moves the origin to a new x,y position
000761  000965  //       : relative to the current origing
000762  000966        
000763  000967  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
000764  000968  // Syntax: gfx_LineTo(x1, y1);
000765  000969  // Usage : gfx_LineTo(arg1, arg2);
000766  000970  // Notes : Draws a Line from the origin x,y to x1,y1.
000767  000971  //       : The new origin is then set to x1, y1. Line colour needs
000768  000972  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
000769  000973        
000770  000974  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
000771  000975  // Syntax: gfx_LineRel(x1, y1);
000772  000976  // Usage : gfx_LineRel(arg1, arg2);
000773  000977  // Notes : Draws a Line from the origin x,y to x1,y1.
000774  000978  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
000775  000979  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
000776  000980        
000777  000981  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
000778  000982  // Syntax: gfx_Line(x1, x2, y2, colr);
000779  000983  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
000780  000984  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
000781  000985        
000782  000986  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
000783  000987  // Syntax: gfx_Line(x1, x2, y, colr);
000784  000988  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
000785  000989  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
000786  000990        
000787  000991  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
000788  000992  // Syntax: gfx_Line(y1, y2, x, colr);
000789  000993  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
000790  000994  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
000791  000995        
000792  000996  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
000793  000997  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
000794  000998  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
000795  000999  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
000796  001000  //       : bottom corner (x2,y2) on the screen.
000797  001001        
000798  001002  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
000799  001003  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
000800  001004  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
000801  001005  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
000802  001006  //       : bottom corner (x2,y2) on the screen.
000803  001007        
000804  001008  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
000805  001009  // Syntax: gfx_Circle(x, y, rad, colr);
000806  001010  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
000807  001011  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
000808  001012        
000809  001013  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
000810  001014  // Syntax: gfx_Circle(x, y, rad, colr);
000811  001015  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
000812  001016  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
000813  001017        
000814  001018  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
000815  001019  // Syntax: gfx_PutPixel(x, y, colr);
000816  001020  // Usage : gfx_PutPixel(arg1, arg2, arg3);
000817  001021  // Notes : Plots a coloured pixel on the screen at x,y location
000818  001022        
000819  001023  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
000820  001024  // Syntax: gfx_GetPixel(x, y);
000821  001025  // Usage : var := gfx_GetPixel(arg1, arg2);
000822  001026  // Notes : Reads and returns the colour value of a pixel at location x,y
000823  001027        
000824  001028  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
000825  001029  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
000826  001030  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
000827  001031  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
000828  001032  //       : Vertices must be specified in an anti-clockwise fashion
000829  001033        
000830  001034  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
000831  001035  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
000832  001036  // Usage : gfx_OrbitInit(&arg1, &arg2);
000833  001037  // Notes : Sets up the Orbit function parameters.
000834  001038  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
000835  001039  //       : variables that get updated after calling gfx_Orbit(,,) function.
000836  001040  //       : The coordiantaes are calculated relative to the origin
000837  001041  //       : obtained by using the gfx_MoveTo(x, y) function.
000838  001042        
000839  001043  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
000840  001044  // Syntax: gfx_Orbit(angle, distance);
000841  001045  // Usage : gfx_Orbit(arg1, arg2);
000842  001046  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
000843  001047  //       : only known parameters are the angle and the distance from the current origin.
000844  001048        
000845  001049  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
000846  001050  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
000847  001051  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
000848  001052  // Notes : This function is very similar to the Ploygon function
000849  001053  //       : with the exception of the 1st and the last vertices not joined.
000850  001054        
000851  001055  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
000852  001056  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
000853  001057  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
000854  001058  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
000855  001059  //       : Vertices must be minimum of 3 and can be specified in any fashion
000856  001060        
000857  001061  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
000858  001062  // Syntax: gfx_Dot();
000859  001063  // Usage : gfx_Dot();
000860  001064  // Notes : Places a coloured dot at the origin
000861  001065        
000862  001066        
000863  001067  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
000864  001068  // Syntax: gfx_Bullet();
000865  001069  // Usage : gfx_Bullet();
000866  001070  // Notes : Places a coloured circle at the origin
000867  001071  //       : filled or unfilled state is controlled by PenSize
000868  001072        
000869  001073  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
000870  001074  // Syntax: gfx_IncX();
000871  001075  // Usage : var := gfx_IncX();
000872  001076  // Notes : Increments the x coordinate of the origin
000873  001077        
000874  001078  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
000875  001079  // Syntax: gfx_IncY();
000876  001080  // Usage : var := gfx_IncY();
000877  001081  // Notes : Increments the y coordinate of the origin
000878  001082        
000879  001083  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
000880  001084  // Syntax: gfx_BoxTo(x1, y1);
000881  001085  // Usage : gfx_BoxTo(arg1, arg2);
000882  001086  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
000883  001087  //       : The new origin is then set to x1,y1. Rectangle colour needs
000884  001088  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
000885  001089  //       : and the PenSize setting determines if Box is solid or outline.
000886  001090        
000887  001091  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
000888  001092  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
000889  001093  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
000890  001094  // Notes : Specifies a clipping window region on the screen such that any objects
000891  001095  //       : and text placed onto the screen will be clipped and displayed only
000892  001096  //       : within that region. For the clipping window to take effect, "Clipping"
000893  001097  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
000894  001098        
000895  001099        
000896  001100  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
000897  001101  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
000898  001102  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
000899  001103  // *Notes:
000900  001104        
000901  001105  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
000902  001106  // Syntax: gfx_SetClipRegion();
000903  001107  // Usage : var := gfx_SetClipRegion();
000904  001108  // *Notes:
000905  001109        
000906  001110  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
000907  001111  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
000908  001112  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
000909  001113  // Notes : Plots a coloured Ellipse on the screen at centre x,y
000910  001114  //       : with xradius = xrad and yradius = yrad.
000911  001115  //       : if PenSize = 0 Ellipse is Solid
000912  001116  //       : if PenSize = 1 Ellipse is Outline
000913  001117        
000914  001118        
000915  001119  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
000916  001120  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
000917  001121  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
000918  001122  // Notes : Plots a coloured Ellipse on the screen at centre x,y
000919  001123  //       : with xradius = xrad and yradius = yrad.
000920  001124        
000921  001125  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 0;
000922  001126  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
000923  001127  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
000924  001128  // Notes : Draws a 3 dimensional Text Button at screen location defined by
000925  001129  //       : x,y arguments (top left corner). The size of the button depends on
000926  001130  //       : the font, width, height and length of the text.
000927  001131  //       : The button appearance will depend on the state parameter setting:
000928  001132  //       :         state = 0 : Button Pressed
000929  001133  //       :         state = 1 : Button Raised
000930  001134        
000931  001135  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
000932  001136  // Syntax: gfx_Panel("style", "x", "y", "width", "height", "colour"), 0;
000933  001137  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
000934  001138  // Notes : Draws a panel (groupbox) at screen location defined by
000935  001139  //       : x, y, width and height with colour "colour".
000936  001140  //       :         state = 0 : recessed
000937  001141  //       :         state = 1 : raised
000938  001142        
000939  001143  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
000940  001144  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
000941  001145  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
000942  001146  // Notes : Draws a 3 dimensional Slider Bar on the screen.
000943  001147  //       : Slider parameters are as follows:
000944  001148  //       :         mode = 0 : Slider recessed
000945  001149  //       :         mode = 1 : Slider raised
000946  001150  //       :         x1, y1 = top left corner
000947  001151  //       :         x2, y2 = bottom right corner
000948  001152  //       :         scale = n : sets the full scale range from 0 to n
000949  001153  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
000950  001154  //       : returns:-
000951  001155        
000952  001156        
000953  001157  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
000954  001158  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
000955  001159  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
000956  001160  // Notes : Copies an area of a screen from xs,ys of size given by width and height
000957  001161  //       : and pastes it to another location determined by xd, yd.
000958  001162        
000959  001163  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
000960  001164  // Syntax: gfx_RGBto565(red, green, blue);
000961  001165  // Usage : gfx_RGBto565(arg1, arg2, arg3);
000962  001166  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
000963  001167        
000964  001168  func gfx_332to565("COLOUR8BIT"), 1;
000965  001169  // Syntax: gfx_332to565(colour);
000966  001170  // Usage : gfx_332to565(arg);
000967  001171  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
000968  001172        
000969  001173  func gfx_Selection("index", "backcolor", "textcolor"), 0;
000970  001174  // Syntax: gfx_Selection("index", "backcolor", "textcolor"), 0;
000971  001175  // Usage : gfx_Selection(1, RED, YELLOW);
000972  001176  // Notes : Called prior to drawing a button, this function
000973  001177  //       : hilites the required text line on a multiline button.
000974  001178        
000975  001179  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
000976  001180  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
000977  001181  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
000978  001182  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
000979  001183  //       : Vertices must be specified in an anti-clockwise fashion
000980  001184        
000981  001185        
000982  001186  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
000983  001187  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
000984  001188  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
000985  001189  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
000986  001190  //       : Vertices must be minimum of 3 and can be specified in any fashion
000987  001191        
000988  001192        
000989  001193  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
000990  001194  // Syntax: gfx_Offset(x, y);
000991  001195  // Usage : gfx_Offset(arg1, arg2);
000992  001196  // Notes : Set the screen offset
000993  001197        
000994  001198        
000995  001199        
000996  001200  func gfx_Get("mode"), 1;
000997  001201  // Syntax: gfx_Get(mode);
000998  001202  // Usage : arg1 := gfx_Get(arg);
000999  001203  // Notes : Returns various parameters to caller
001000  001204  //       :
001001  001205  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001002  001206  //       : var := gfx_Get(X_MAX);
001003  001207  //       : Returns the maximum horizontal value of the display
001004  001208  //       :
001005  001209  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001006  001210  //       : var := gfx_Get(Y_MAX);
001007  001211  //       : Returns the maximum vertical value of the display
001008  001212  //       :
001009  001213  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001010  001214  //       : var := gfx_Get(LEFT_POS);
001011  001215  //       : Returns the left location of the last drawn object
001012  001216  //       : such as a slider or button or an image/video
001013  001217  //       :
001014  001218  //       : mode = TOP_POS (mode 3) : Top location of Object
001015  001219  //       : var := gfx_Get(TOP_POS);
001016  001220  //       : Returns the top location of the last drawn object
001017  001221  //       : such as a slider or button or an image/video
001018  001222  //       :
001019  001223  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001020  001224  //       : var := gfx_Get(RIGHT_POS);
001021  001225  //       : Returns the right location of the last drawn object
001022  001226  //       : such as a slider or button or an image/video
001023  001227  //       :
001024  001228  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001025  001229  //       : var := gfx_Get(BOTTOM_POS );
001026  001230  //       : Returns the bottom location of the last drawn object
001027  001231  //       : such as a slider or button or an image/video
001028  001232  //       :
001029  001233        
001030  001234        
001031  001235  //==================================================//
001032  001236  // Single parameter short-cuts                      //
001033  001237  // for the gfx_Set functions                        //
001034  001238  // These functions return the existing value before //
001035  001239  // the change is made.                              //
001036  001240  //==================================================//
001037  001241  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001038  001242  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001039  001243  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001040  001244  func gfx_Clipping("mode"), 0;                       // 3  graphics clipping ON/OFF
001041  001245  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001042  001246  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001043  001247  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001044  001248  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001045  001249  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001046  001250  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001047  001251  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001048  001252  func gfx_ColourMode("mode"), 1;                     // 11 graphics colour mode COLOUR8 or COLOUR16 (default colour 16)
001049  001253  func gfx_BevelWidth("mode"), 1;                     // 12 graphics button bevel width
001050  001254  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001051  001255  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001052  001256  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001053  001257        
001054  001258        
001055  001259  //==================================================//
001056  001260  // uSD/FLASH Function Prototypes                    //
001057  001261  //==================================================//
001058  001262  func media_Video("x", "y"), 0;                      // display movie at position x y
001059  001263  // Syntax: media_Video(x, y);
001060  001264  // Usage : media_Video(arg1, arg2);
001061  001265  // Notes : Play a Video/Animation clip from the uSD card at screen location
001062  001266  //       : specified by x,y (top left corner). The location of the clip in the
001063  001267  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001064  001268        
001065  001269  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001066  001270  // Syntax: media_VideoFrame(Frame_number);
001067  001271  // Usage : arg1 := media_VideoFrame();
001068  001272  // Notes : After a pointer to a valid video has been set with media_SetSector,
001069  001273  //       : calling this function shows each fram sequentially, returning
001070  001274  //       : the number of frames remaining. The position of the image is
001071  001275  //     : at the current origin as set with gfx_MoveTo(...);
001072  001276        
001073  001277  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001074  001278  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001075  001279  // Usage : media_SetAdd(arg1, arg2);
001076  001280  // Notes : Set uSD internal Address pointer for bytewise access
001077  001281        
001078  001282  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001079  001283  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001080  001284  // Usage : media_SetSector(arg1, arg2);
001081  001285  // Notes : Set uSD internal Sector pointer for sector block access
001082  001286        
001083  001287  func media_RdSector("*destination"), 1;
001084  001288  // Syntax: media_RdSector(*destination);
001085  001289  // Usage : media_RdSector(rdblock);
001086  001290  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001087  001291  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001088  001292  //       : After the read the Sector pointer is automatically incremented by 1.
001089  001293  //       : Returns TRUE if uSD response was TRUE
001090  001294        
001091  001295  func media_WrSector("*source"), 1;
001092  001296  // Syntax: media_WrSector(*source);
001093  001297  // Usage : media_WrSector(wrblock);
001094  001298  // Notes : Writes 512 bytes (256 words) from a source memory block
001095  001299  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001096  001300  //       : pointer is automatically incremented by 1.
001097  001301  //       : Returns TRUE if uSD response was TRUE
001098  001302        
001099  001303  func media_ReadByte(), 1;                // read a byte at the current stream position
001100  001304  // Syntax: media_RdByte();
001101  001305  // Usage : var := media_RdByte();
001102  001306  // Notes : Reads and Returns a single byte of data from the
001103  001307  //       : uSD card pointed to by the internal Address pointer.
001104  001308  //       : After the read the Address pointer is automatically
001105  001309  //       : incremented by 1.
001106  001310        
001107  001311  func media_ReadWord(), 1;                // read a word at the current stream position
001108  001312  // Syntax: media_ReadWord();
001109  001313  // Usage : var := media_ReadWord();
001110  001314  // *Notes : Reads and Returns a single word of data from the
001111  001315  //       : uSD card pointed to by the internal Address pointer.
001112  001316  //       : After the read the Address pointer is automatically
001113  001317  //       : incremented by 2.
001114  001318        
001115  001319  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
001116  001320  // Syntax: media_WriteByte(arg1);
001117  001321  // Usage : var := media_WriteByte(arg1);
001118  001322  // *Notes : Writes and Returns xxxxx
001119  001323  //       : After the write the Address pointer is automatically
001120  001324  //       : incremented by 1.
001121  001325        
001122  001326  func media_WriteWord("word"), 1;            // write a word to the current stream position
001123  001327  // Syntax: media_WriteWord(arg1);
001124  001328  // Usage : var := media_WriteWord(arg1);
001125  001329  // *Notes : Writes and Returns xxxxx
001126  001330  //       : After the write the Address pointer is automatically
001127  001331  //       : incremented by 2.
001128  001332        
001129  001333  func media_Image("x", "y"), 0;            // display image at position x y
001130  001334  // Syntax: media_Image(x, y);
001131  001335  // Usage : media_Image(arg1, arg2);
001132  001336  // Notes : Display an image from the uSD card at screen location
001133  001337  //       : specified by x,y (top left corner). The location of the
001134  001338  //       : Image in the uSD card must be specified by
001135  001339  //       : media_setSector(Image_Sector_Add) function.
001136  001340        
001137  001341  func media_Flush(), 1;                    // after writing to media, flush the sector and write
001138  001342  // Syntax: media_Flush();
001139  001343  // Usage : var := media_Flush();
001140  001344  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
001141  001345  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
001142  001346        
001143  001347  func media_Init(), 1;                    // initialize uSD card
001144  001348  // Usage : media_Init();
001145  001349  // Notes : Initialise uSD CARD
001146  001350  //       : Response: 0 = No Card
001147  001351  //       :           1 = Card Initialised
001148  001352        
001149  001353        
001150  001354  //==============================================//
001151  001355  // Communications Function Prototypes           //
001152  001356  //==============================================//
001153  001357  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
001154  001358  // Syntax: com_Init(buffer, bufsize, qualifier);
001155  001359  // Usage1: com_Init(mybuf, 20, 0);
001156  001360  // Usage2: com_Init(mybuf, 20, ':');
001157  001361  // Notes : initialize a serial capture buffer for the comms input
001158  001362  //       : The program must declare a var array as a circular buffer.
001159  001363  //       : Usage1 declares a circular buffer which will continually
001160  001364  //       : buffer characters.
001161  001365  //       : Usage2 must receive ':' before any characters will
001162  001366  //       : accumulate in the buffer.
001163  001367        
001164  001368  func com_Reset(), 0;                 // reset the comms receiver
001165  001369  // Syntax: com_Reset();
001166  001370  // Usage : com_Reset();
001167  001371  // Notes : reset comms to default polled mode
001168  001372        
001169  001373  func com_Count(), 1;                // return count of characters in receive buffer
001170  001374  // Syntax: com_Count();
001171  001375  // Usage : arg := com_Count();
001172  001376  // Notes : return count of buffered characters in buffer attachment
001173  001377        
001174  001378  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
001175  001379  // Syntax: com_Full();
001176  001380  // Usage : if (com_Full() ,,,, go read buffer;
001177  001381  // Notes : return true if buffer full (not necessarily an error if
001178  001382  //       : buffer is sized to a packet size)
001179  001383        
001180  001384  func com_Error(), 1;                // return comms errors comms error occurred
001181  001385  // Syntax: com_Error();
001182  001386  // Usage : if (com_Error() ) ...... take recovery action;
001183  001387  // Notes : return non zero if any errors low level comms errors occured
001184  001388  // returns :
001185  001389  // bit0 = Receiver Overflow Error
001186  001390  // bit1 = Receiver Framing Error
001187  001391  // bit2 = Transmit Buffer Overflow
001188  001392        
001189  001393  func com_Sync(), 1;                // returns TRUE if qualifier has been received
001190  001394  // Syntax: com_Sync();
001191  001395  // Usage : com_Sync();
001192  001396  // return true if sync character has been received in com_Init("...") mode
001193  001397        
001194  001398        
001195  001399  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
001196  001400  // Syntax: com_TXbuffer("buf", "bufsize", "pin");
001197  001401  // Usage : com_TXbuffer(mybuf, 1024, IO1_PIN);    // set the TX buffer, usin IO1_PIN for turnaround
001198  001402  // Usage : com_TXbuffer(0, 0, 0);              // revert to non buffered service
001199  001403  // Notes : initialize a serial buffer for the COM0 output.
001200  001404  //       : The program must declare a var array as a circular buffer.
001201  001405  //       : When a TX buffer is declared for comms, the transmission
001202  001406  //       : of characters becomes non blocking. The only time
001203  001407  //       : blocking will occur is if the buffer has insufficient space
001204  001408  //       : to accept the next character, in which case the function
001205  001409  //       : will wait for buffer space to become available. If the
001206  001410  //       : TX buffer is no longer required, just set the buffer pointer
001207  001411  //       : to zero, the size in this case doesnt matter and is ignored.
001208  001412  //       : The function can resize or reallocated to another buffer at
001209  001413  //       : any time. The buffer is flushed before any changes are made.
001210  001414  //       : "pin" designates an IO pin to control a bi-directional 
001211  001415  //       : control device for half duplex mode. "pin" will go HI at the
001212  001416  //       : start of a transmission, and will return low after the final
001213  001417  //       : byte is transmitted. If not required, just set "pin" to zero.
001214  001418        
001215  001419        
001216  001420  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
001217  001421  // Syntax: com_TXcount();
001218  001422  // Usage : arg := com_Count();
001219  001423  // Notes : return count of characters remaining in COM0 transmit buffer
001220  001424  //       : that was previously allocated with com_TXbuffer(...);
001221  001425        
001222  001426        
001223  001427  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
001224  001428  // Syntax: com_TXemptyEvent(function);
001225  001429  // Usage : arg := com_TXemptyEvent();
001226  001430  // Notes : If a comms TX buffer that was previously allocated with
001227  001431  //       : com_TXbuffer(...);, this function can be used to set up
001228  001432  //       : a function to be called when the COM0 TX buffer is empty.
001229  001433  //       : This is useful for either reloading the TX buffer, setting
001230  001434  //       : or clearing a pin to change the direction of eg a RS485
001231  001435  //       : line driver, or any other form of traffic control.
001232  001436  //       : The event function must not have any parameters.
001233  001437  //       : To disable the event, simply call com_TXemptyEvent(0).
001234  001438  //       : com_TXbuffer(...); also resets any active event.
001235  001439  //       : com_TXemptyEvent returns any previous event function
001236  001440  //       : address, or zero if there was no previous function.
001237  001441        
001238  001442        
001239  001443  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
001240  001444  // Usage : arg := com_TXbufferHold(ON);  // hold the buffer while we fill it
001241  001445  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
001242  001446  // Notes : Expecting that a comms TX buffer that was previously allocated with
001243  001447  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
001244  001448  //       : the buffer being sent wile it is being loaded. Mormally, when
001245  001449  //       : using buffered comms, the transmit process will begin
001246  001450  //       : immediately. This is often undesirable for 2 reasons,
001247  001451  //       : 1] you may wish to build a packet then send it later
001248  001452  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
001249  001453  //       : as the FIFO buffer is constantly trying to empty while
001250  001454  //       : you are busy tring to fill it.
001251  001455  // return -1 if function is called illegally when TX comms is not buffered.
001252  001456  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
001253  001457  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
001254  001458        
001255  001459        
001256  001460  //=============================================================//
001257  001461  // Auxilliary Communications Function Prototypes
001258  001462  //=============================================================//
001259  001463  func com1_Init("buffer", "bufsize", "qualifier"), 0;
001260  001464  // Syntax: com_Init(buffer, bufsize, qualifier);
001261  001465  // Usage1: com_Init(mybuf, 20, 0);
001262  001466  // Usage2: com_Init(mybuf, 20, ':');
001263  001467  // Notes : initialize a serial capture buffer for the comms input
001264  001468  //       : The program must declare a var array as a circular buffer.
001265  001469  //       : Usage1 declares a circular buffer which will continually
001266  001470  //       : buffer characters.
001267  001471  //       : Usage2 must receive ':' before any characters will
001268  001472  //       : accumulate in the buffer.
001269  001473        
001270  001474  func com1_Reset(), 0;
001271  001475  // Syntax: com_Reset();
001272  001476  // Usage : com_Reset();
001273  001477  // Notes : reset comms receiver to default polled mode
001274  001478        
001275  001479  func com1_Count(), 1;
001276  001480  // Syntax: com_Count();
001277  001481  // Usage : arg := com_Count();
001278  001482  // Notes : return count of characters in receive buffer
001279  001483        
001280  001484  func com1_Full(), 1;
001281  001485  // Syntax: com_Full();
001282  001486  // Usage : if (com_Full() ,,,, go read buffer;
001283  001487  // Notes : return true if receive buffer full
001284  001488        
001285  001489  func com1_Error(), 1;
001286  001490  // Syntax: com_Error();
001287  001491  // Usage : if (com_Error() ) ...... take recovery action;
001288  001492  // Notes : return non zero if any level comms errors occured
001289  001493  // returns :
001290  001494  // bit0 = Receiver Overflow Error
001291  001495  // bit1 = Receiver Framing Error
001292  001496  // bit2 = Transmit Buffer Overflow
001293  001497        
001294  001498  func com1_Sync(), 1;
001295  001499  // Syntax: com_Sync();
001296  001500  // Usage : com_Sync();
001297  001501  // Notes : return true if sync character has been received in com_Init("...") mode
001298  001502        
001299  001503        
001300  001504  func com1_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
001301  001505  // Syntax: com1_TXbuffer("buf", "bufsize", "pin");
001302  001506  // Usage : com1_TXbuffer(mybuf, 1024, IO1_PIN);    // set the TX buffer, usin IO1_PIN for turnaround
001303  001507  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
001304  001508  // Notes : initialize a serial buffer for the COM1 output.
001305  001509  //       : The program must declare a var array as a circular buffer.
001306  001510  //       : When a TX buffer is declared for comms, the transmission
001307  001511  //       : of characters becomes non blocking. The only time
001308  001512  //       : blocking will occur is if the buffer has insufficient space
001309  001513  //       : to accept the next character, in which case the function
001310  001514  //       : will wait for buffer space to become available. If the
001311  001515  //       : TX buffer is no longer required, just set the buffer pointer
001312  001516  //       : to zero, the size in this case doesnt matter and is ignored.
001313  001517  //       : The function can resize or reallocated to another buffer at
001314  001518  //       : any time. The buffer is flushed before any changes are made.
001315  001519  //       : "pin" designates an IO pin to control a bi-directional 
001316  001520  //       : control device for half duplex mode. "pin" will go HI at the
001317  001521  //       : start of a transmission, and will return low after the final
001318  001522  //       : byte is transmitted. If not required, just set "pin" to zero.
001319  001523        
001320  001524        
001321  001525  func com1_TXcount(), 1;                // return count of characters in COM1 TX buffer
001322  001526  // Syntax: com1_TXcount();
001323  001527  // Usage : arg := com1_Count();
001324  001528  // Notes : return count of characters remaining in COM1 transmit buffer
001325  001529  //       : that was previously allocated with com1_TXbuffer(...);
001326  001530        
001327  001531        
001328  001532  func com1_TXemptyEvent("function"), 1;  // sets a function to be called when COM1 TX buffer empty
001329  001533  // Syntax: com1_TXemptyEvent(function);
001330  001534  // Usage : arg := com1_TXemptyEvent();
001331  001535  // Notes : If a comms TX buffer that was previously allocated with
001332  001536  //       : com1_TXbuffer(...);, this function can be used to set up
001333  001537  //       : a function to be called when the COM1 TX buffer is empty.
001334  001538  //       : This is useful for either reloading the TX buffer, setting
001335  001539  //       : or clearing a pin to change the direction of eg a RS485
001336  001540  //       : line driver, or any other form of traffic control.
001337  001541  //       : The event function must not have any parameters.
001338  001542  //       : To disable the event, simply call com1_TXemptyEvent(0).
001339  001543  //       : com1_TXbuffer(...); also resets any active event.
001340  001544  //       : com1_TXemptyEvent returns any previous event function
001341  001545  //       : address, or zero if there was no previous function.
001342  001546        
001343  001547        
001344  001548  func com1_TXbufferHold("state"), 1; // hold or release a com1_TXbuffer
001345  001549  // Usage : arg := com1_TXbufferHold(ON);  // hold the buffer while we fill it
001346  001550  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
001347  001551  // Notes : Expecting that a comms TX buffer that was previously allocated with
001348  001552  //       : com1_TXbuffer(...);, com1_TXbufferHold(ON) can be used to stop
001349  001553  //       : the buffer being sent wile it is being loaded. Mormally, when
001350  001554  //       : using buffered comms, the transmit process will begin
001351  001555  //       : immediately. This is often undesirable for 2 reasons,
001352  001556  //       : 1] you may wish to build a packet then send it later
001353  001557  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
001354  001558  //       : as the FIFO buffer is constantly trying to empty while
001355  001559  //       : you are busy tring to fill it.
001356  001560  // return -1 if function is called illegally when TX comms is not buffered.
001357  001561  // return buffer count when called with argument of 1, eg com1_TXbufferHold(ON)
001358  001562  // return 0 when argument is zero, eg com1_TXbufferHold(OFF)
001359  001563        
001360  001564  func serin1(), 1;
001361  001565  // Syntax: serin1();
001362  001566  // Usage : char := serin1();
001363  001567  // Notes : return the next available character from COM1
001364  001568        
001365  001569  func serout1("char"), 0;
001366  001570  // Syntax: serout1("char");
001367  001571  // Usage : serout1(ch);
001368  001572  // Notes : send character to COM1
001369  001573        
001370  001574  func com_SetBaud("comport","baudrate/10"), 1;
001371  001575  // Syntax: com_SetBaud("comport","baudrate/10");
001372  001576  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
001373  001577  // Notes : sets to any viable baud rate from 160 to 655350
001374  001578  // return true if baud rate was acceptable
001375  001579        
001376  001580        
001377  001581        
001378  001582  //==============================================//
001379  001583  // Display Access                               //
001380  001584  //==============================================//
001381  001585  func disp_Init(), 0;                            // initialize display with required tables
001382  001586  // Syntax: disp_Init();
001383  001587  // Usage : disp_Init();
001384  001588  // Notes : Initialises or reinitialises the display.
001385  001589  //       : Normally used after restoration of peripheral power
001386  001590  //       : and after DeepSleep.
001387  001591        
001388  001592  func disp_SetReg("register", "data"), 0;
001389  001593  // Syntax: display_SetReg(register, data);
001390  001594  // Usage : display_SetReg(arg1, arg2);
001391  001595  // Notes : Sets uLCD specific display driver registers. Refer
001392  001596  //       : to appropriate display driver data sheet.
001393  001597        
001394  001598  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
001395  001599  // Syntax: disp_setGRAM(x1, y1, x2, y2);
001396  001600  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
001397  001601  // Notes : Prepares the GRAM area for user access.
001398  001602  //       : Data can now be written with disp_GRAM.
001399  001603  //       : GRAM will be set accordingly for the correct screen mode.
001400  001604  //       : the LO word of the 32 bit pixel count is returned. This is
001401  001605  //       : usually all that is needed unlse GRAM area exceeds 256^2
001402  001606  //       : A copy of the 32bit value can be found in
001403  001607  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
001404  001608        
001405  001609  func disp_WrGRAM("colour"), 0;
001406  001610  // Syntax: display_WrGRAM(colour);
001407  001611  // Usage : display_WrGRAM(arg);
001408  001612  // Notes : Data can be written to the GRAM consecutively using
001409  001613  //       : this function once the GRAM access window has been setup.
001410  001614        
001411  001615  func disp_WriteControl("value"), 0;             // write a control byte to the display
001412  001616  func disp_WriteWord("value"), 0;                // write a word to the display
001413  001617        
001414  001618        
001415  001619  func disp_ReadWord(), 1;                        // read a word from the display
001416  001620  // Syntax: disp_ReadWord();
001417  001621  // Usage : x:=disp_ReadWord();
001418  001622  // Notes : Read a word from the controller
001419  001623  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
001420  001624  //       : print(disp_ReadWord());        // print ID
001421  001625  //       : (Many displays are write only)
001422  001626        
001423  001627                                                  //
001424  001628  //==============================================//
001425  001629  // unadorned SPI functions                      //
001426  001630  //==============================================//
001427  001631  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
001428  001632  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
001429  001633  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
001430  001634  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
001431  001635                                                  //
001432  001636  //==============================================//
001433  001637  // flash device specific functions              //
001434  001638  //==============================================//
001435  001639  func flash_SIG(), 1;                            // read Jedecsignature from SPI Flash device
001436  001640  func flash_ID(), 1;                             // read ID code from FLASH device
001437  001641  func flash_BulkErase(), 0;                      // erase the entire FLASH device
001438  001642  func flash_BlockErase("block"), 1;              // erase the required 64k flash block
001439  001643                                                  //
001440  001644                                                  //
001441  001645  //==============================================//
001442  001646  // string and character size function           //
001443  001647  //==============================================//
001444  001648  func charwidth("char"), 1;                      // return width of a character in pixel units
001445  001649  func charheight("char"), 1;                     // return height of a character in pixel units
001446  001650  func strwidth("pointer"), 1;                    // return width of a string in pixel units
001447  001651  func strheight(), 1;                            // return height of a string in pixel units
001448  001652        
001449  001653        
001450  001654  //------------------------------------------------------------------//
001451  001655  //        I2C Function Prototypes
001452  001656  //------------------------------------------------------------------//
001453  001657  func I2C_Open("speed"), 0;
001454  001658  // Syntax: I2C_Open(speed),
001455  001659  // Usage : I2C_Open(I2C_MED);
001456  001660  // Notes : configures the I2C module
001457  001661  //       : speed can be I2C_SLOW, I2C_MED, I2C_FAST (100khz, 400khz, 1mhz)
001458  001662        
001459  001663  func I2C_Close(), 0;
001460  001664  // Syntax: I2C_Close();
001461  001665  // Usage : I2C_Close();
001462  001666  // Notes : disables the I2C1 module.
001463  001667        
001464  001668  func I2C_Start(), 1;
001465  001669  // Syntax: I2C_Start();
001466  001670  // Usage : I2C_Start();
001467  001671  // Notes : generates a Start condition.
001468  001672  //       : returns true if successful (usually ignored)
001469  001673        
001470  001674  func I2C_Stop(), 1;
001471  001675  // Syntax: I2C_Stop();
001472  001676  // Usage : I2C_Stop();
001473  001677  // Notes : generates a Stop condition.
001474  001678  //       : returns true if successful (usually ignored)
001475  001679        
001476  001680  func I2C_Restart(), 1;
001477  001681  // Syntax: I2C_Restart();
001478  001682  // Usage : I2C_Restart();
001479  001683  // Notes : generates a Restart condition.
001480  001684  //       : returns true if successful (usually ignored)
001481  001685        
001482  001686  func I2C_Read(), 1;
001483  001687  // Syntax: I2C_Read();
001484  001688  // Usage : ch := I2C_Read();
001485  001689  // Notes : reads a single byte from the I2C Bus.
001486  001690        
001487  001691  func I2C_Write("byte"), 1;
001488  001692  // Syntax: I2C_Write(byte);
001489  001693  // Usage : r := I2C_Write(ch);
001490  001694  // Notes : is used to write a byte to the I2C bus.
001491  001695  //       : Returns 0 if failed, 1 if no ack, 2 if ack
001492  001696        
001493  001697  func I2C_Ack(), 0;
001494  001698  // Syntax: I2C_Ack();
001495  001699  // Usage : I2C_Ack();
001496  001700  // Notes : generates the acknowledge condition.
001497  001701        
001498  001702  func I2C_Nack(), 0;
001499  001703  // Syntax: I2C_Nack();
001500  001704  // Usage : I2C_Nack();
001501  001705  // Notes : generates the negative acknowledge condition.
001502  001706        
001503  001707  func I2C_AckStatus(), 0;
001504  001708  // Syntax: I2C_AckStatus();
001505  001709  // Usage : r := I2C_AckStatus();
001506  001710  // Notes : returns the ACK status from the device.
001507  001711        
001508  001712  func I2C_AckPoll("control"), 1;
001509  001713  // Syntax: I2C_AckPoll();
001510  001714  // Usage : r := I2C_AckPoll(0xA0);
001511  001715  // Notes : waits for a device to return from ACK polling.
001512  001716        
001513  001717  func I2C_Idle(), 0;
001514  001718  // Syntax: I2C_Idle();
001515  001719  // Usage : I2C_Idle();
001516  001720  // Notes : waits until the I2C Bus is Inactive.
001517  001721        
001518  001722  func I2C_Gets("buffer", "size"), 1;
001519  001723  // Syntax: I2C_Gets("buffer", "size");
001520  001724  // Usage : r := I2C_Gets(mybuf, 16);
001521  001725  // Notes : only reads up to "size" characters into "buffer"
001522  001726  //       : Reads up to asciiz terminator including terminator
001523  001727        
001524  001728  func I2C_Getn("buffer", "size"), 1;
001525  001729  // Syntax: I2C_Gets("buffer", "size");
001526  001730  // Usage : r := I2C_Gets(mybuf, 16);
001527  001731  // Notes : reads "size" bytes into "buffer"
001528  001732  //       :
001529  001733        
001530  001734  func I2C_Puts("buffer"), 1;
001531  001735  // Syntax: I2C_Puts("buffer");
001532  001736  // Usage : r := I2C_Puts(mybuf);
001533  001737  // Notes : writes an asciiz string to the I2C device
001534  001738  //       : returns count of characters written
001535  001739        
001536  001740  func I2C_Putn("buffer", "count"), 1;
001537  001741  // Syntax: I2C_Putn("buffer","count");
001538  001742  // Usage : r := I2C_Puts(mybuf,10);
001539  001743  // Notes : writes up to "size" bytes to the I2C device
001540  001744  //       : returns number of bytes written
001541  001745        
001542  001746        
001543  001747  //------------------------------------------------------------------//
001544  001748  //        Image Control Function Prototypes
001545  001749  //------------------------------------------------------------------//
001546  001750  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
001547  001751  // Syntax: img_SetPosition(handle, index, xpos, ypos);
001548  001752  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
001549  001753  // Notes : set the position where the image will be displayed
001550  001754  //       : returns true if index was ok and function was successful.
001551  001755  //       : you may turn off an image so when img_Refresh is called,
001552  001756  //       : the image will not be shown
001553  001757        
001554  001758  func img_Enable("handle", "index"), 1;
001555  001759  // Syntax: img_Enable(handle, index);
001556  001760  // Usage : r := img_Enable(hImageList, imagenum);
001557  001761  // Notes : enable image in a image list
001558  001762  //       : returns true if index was ok and function was successful.
001559  001763  //       : this is the default state so when img_Refresh is called,
001560  001764  //       : all the images in the list will be shown
001561  001765  //       : if index is set to -1, all of the images are enabled
001562  001766        
001563  001767  func img_Disable("handle", "index"), 1;
001564  001768  // Syntax: img_Disable(handle, index);
001565  001769  // Usage : r := img_Disable(hImageList, imagenum);
001566  001770  // Notes : disable image in a image list
001567  001771  //       : returns true if index was ok and function was successful.
001568  001772  //       : you must turn off an image so when img_Refresh is called,
001569  001773  //       : the image will not be shown.
001570  001774  //       : if index is set to -1, all of the images are disabled
001571  001775        
001572  001776        
001573  001777  func img_Darken("handle", "index"), 1;
001574  001778  // Syntax: img_Darken(handle, index);
001575  001779  // Usage : r := img_Darken(hImageList, imagenum);
001576  001780  // Notes : darken image in a image list
001577  001781  //       : returns true if index was ok and function was successful.
001578  001782  //       : if index is set to -1, all of the images are darkened
001579  001783  //       : NB:- this feature will only work for the next refresh, then
001580  001784  //       : the image reverts back to normal when displayed again.
001581  001785        
001582  001786        
001583  001787  func img_Lighten("handle", "index"), 1;
001584  001788  // Syntax: img_Lighten(handle, index);
001585  001789  // Usage : r := img_Lighten(hImageList, imagenum);
001586  001790  // Notes : lighten image in a image list
001587  001791  //       : returns true if index was ok and function was successful.
001588  001792  //       : if index is set to -1, all of the images are lightened
001589  001793  //       : NB:- this feature will only work for the next refresh, then
001590  001794  //       : the image reverts back to normal when displayed again.
001591  001795        
001592  001796  func img_SetWord("handle", "index", "offset", "word"), 1;
001593  001797  // Syntax: img_SetWord(handle, index, offset, word);
001594  001798  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
001595  001799  // Notes : set specified word (0-7) in a image entry
001596  001800  //       : returns TRUE if successful, return value usually ignored.
001597  001801        
001598  001802  func img_GetWord("handle", "index", "offset"), 1;
001599  001803  // Syntax: myvar := img_GetWord("handle", "index", "offset");
001600  001804  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
001601  001805  // Notes : returns specified word (0-14) from an image entry
001602  001806  //       : refer to image control entry offsets.
001603  001807        
001604  001808  func img_Show("handle", "index"), 1;
001605  001809  // Syntax: img_Show(handle, index);
001606  001810  // Usage : display image entry (regardless of enable/disable)
001607  001811  //       : returns TRUE if successful, return value usually ignored.
001608  001812        
001609  001813  func img_SetAttributes("handle", "index","value"), 1;
001610  001814  // Syntax: img_SetAttributes("handle", "index","offset");
001611  001815  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
001612  001816  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
001613  001817  //       : of an image control entry. "value" refers to various bits in
001614  001818  //       : the image control entry (see image attribute flags).
001615  001819  //       : A '1' bit in the "value" field SETS the respective bit
001616  001820  //       : in the IMAGE_FLAGS field of the image control entry.
001617  001821  //       : returns TRUE if successful, return value usually ignored.
001618  001822        
001619  001823  func img_ClearAttributes("handle", "index","value"), 1;
001620  001824  // Syntax: img_ClearAttributes("handle", "index","offset");
001621  001825  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
001622  001826  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
001623  001827  //       : of an image control entry. "value" refers to various bits in
001624  001828  //       : the image control entry (see image attribute flags)
001625  001829  //       : a '1' bit in the "value" field CLEARS the respective bit
001626  001830  //       : in the IMAGE_FLAGS field of the image control entry.
001627  001831  //       : returns TRUE if successful, return value usually ignored.
001628  001832        
001629  001833  func img_Touched("handle", "index"), 1;
001630  001834  // Syntax: r := img_Touched(handle, index);
001631  001835  // Usage : img_Touched(hndl, 17);
001632  001836  //       : returns -1 if image not touched, or returns index
001633  001837  // Notes : if index is passed as -1, function tests all images,
001634  001838  //       : and returns -1 if image not touched, or returns index.
001635  001839        
001636  001840        
001637  001841        
001638  001842        
001639  001843  //------------------------------------------------------------------//
001640  001844  //        Timer Function Prototypes
001641  001845  //------------------------------------------------------------------//
001642  001846  func sys_T(), 1;
001643  001847  // Syntax: sys_T();
001644  001848  // Usage : t := sys_T();
001645  001849  // Notes : return the current value of the rolling system timer (1msec) LO word
001646  001850        
001647  001851  func sys_T_HI(), 1;
001648  001852  // Syntax: sys_T_HI();
001649  001853  // Usage : t := sys_T_HI();
001650  001854  // Notes : return the current value of the rolling system timer (1msec) HI word
001651  001855        
001652  001856  func sys_SetTimer("timernum","value"), 0;
001653  001857  // Syntax: sys_SetTimer("timernum", "value");
001654  001858  // Usage : sys_SetTimer(TIMER5, 10000);
001655  001859  // Notes : set a countdown on the selected timer, or 'top up' if required.
001656  001860  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
001657  001861  //       : Maximum timeout period is 65.535 seconds
001658  001862  //       : A timer can be read with the sys_GetTimer("timernum") function
001659  001863        
001660  001864  func sys_GetTimer("timernum"), 1;
001661  001865  // Syntax: t := sys_GetTimer("timernum");
001662  001866  // Usage : t := sys_GetTimer(TIMER3);
001663  001867  // Notes : returns 0 if timer has expired, or the current countdown value.
001664  001868  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
001665  001869  //       : Maximum timeout period is 65.535 seconds
001666  001870  //       : A timer must be set with the sys_SetTimer("timernum","value") function
001667  001871        
001668  001872  func sys_SetTimerEvent("timernum","function"), 1;
001669  001873  // Syntax: sys_SetTimerFunction("timernum", "function");
001670  001874  // Usage : sys_SetTimer(TIMER5, myfunc);
001671  001875  // Notes : set a function to be called for selected timer.
001672  001876  //       : When the timer reaches zero, the function is called.
001673  001877  //       : The called function must not have any parameters
001674  001878  //       : sys_SetTimerEvent returns any previous event function
001675  001879  //       : address, or zero if there was no previous function.
001676  001880        
001677  001881  func sys_EventQueue(), 1;
001678  001882  // Syntax: sys_EventQueue();
001679  001883  // Usage : tasks := sys_EventQueue();
001680  001884  // Notes : returns the max number of events that were pending
001681  001885  //       : in the timer queue since the last call to this function.
001682  001886  //       : This can be used to assess timer event overhead burden,
001683  001887  //       : especially after or during a sys_EventsPostpone action.
001684  001888        
001685  001889  func sys_EventsPostpone(), 0;
001686  001890  // Syntax: sys_EventPostpone();
001687  001891  // Usage : sys_EventPostpone();   // postpone the event queue
001688  001892  // Notes : postpone any events until the sys_EventResume function is executed
001689  001893  //       : The timer event queue will continue to queue events, but no action
001690  001894  //       : will take place untill a sys_EventResume function is encountered.
001691  001895  //       : The queue will continue to receive up to 32 events before discarding
001692  001896  //       : any further events. This function is required to allow a sequence of
001693  001897  //       : instructions or functions to occur that would otherwise be corrupted
001694  001898  //       : by an event occuring during the sequence of instructions or functions.
001695  001899  //       : A good example of this is when you set a position to print, if there
001696  001900  //       : was no way of locking the current sequence, an event may occur which
001697  001901  //       : does a similar thing, and a contention would occur - printing to
001698  001902  //       : the wrong position. This function should be used wisely, if any action
001699  001903  //       : that is required would take considerable time, it is better to disable
001700  001904  //       : any conflicting event functions with a bypass flag, then restart the
001701  001905  //       : conflicting event by re-issuing a timer value.
001702  001906        
001703  001907  func sys_EventsResume(), 0;
001704  001908  // Syntax: sys_EventsResume();
001705  001909  // Usage : sys_EventsResume();   // resume the event queue
001706  001910  // Notes : resume any postponed events. The queue will try to execute any timer
001707  001911  //       : events that were incurred during the postponed period.
001708  001912        
001709  001913        
001710  001914  func sys_Sleep("units"), 1;
001711  001915  // Syntax: t := sys_Sleep("units");
001712  001916  // Usage : t := sys_Sleep(10);
001713  001917  // Notes : sets the display into low power mode for a period of time.
001714  001918  //       : Touching the touch screen will also wake from sleep.
001715  001919  //       : Returns remaining sleep units.
001716  001920        
001717  001921  func iterator("offset"), 0;
001718  001922  // Syntax: t :=  iterator("offset");
001719  001923  // Usage : t :=  iterator(10);
001720  001924  // Notes : set the iterator size for ++/--
001721  001925  //       : The next postinc,postdec,preinc of predec will alter
001722  001926  //       : by the specified value.
001723  001927  //       : The offset will return to 1 after the next operation.
001724  001928        
001725  001929        
001726  001930        
001727  001931        
001728  001932  //------------------------------------------------------------------//
001729  001933  //         Touch Screen Function Prototypes
001730  001934  //------------------------------------------------------------------//
001731  001935        
001732  001936  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
001733  001937  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
001734  001938  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
001735  001939  // Notes : Specifies a new touch detect region on the screen
001736  001940  //       : such that only touch activity in that region will
001737  001941  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
001738  001942        
001739  001943  func touch_Set("mode"), 0;
001740  001944  // Syntax: touch_Set(mode);
001741  001945  // Usage : touch_Set(arg);
001742  001946  // Notes : Sets various Touch Screen related parameters
001743  001947  //       :
001744  001948  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
001745  001949  //       : touch_Set(TOUCH_ENABLE);
001746  001950  //       : Enables and initialises Touch Screen hardware
001747  001951  //       :
001748  001952  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
001749  001953  //       : touch_Set(TOUCH_DISABLE );
001750  001954  //       : Disables the Touch Screen
001751  001955  //       : Note: Touch Screen runs in the background and disabling
001752  001956  //       : it when not in use will free up extra resources
001753  001957  //       : such as 4DVM CPU cycles.
001754  001958  //       :
001755  001959  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
001756  001960  //       : touch_Set(TOUCH_REGIONDEFAULT);
001757  001961  //       : This will reset the current active region to default
001758  001962  //       : to the full screen without the application having to
001759  001963  //       : set a new active region for the full screen.
001760  001964  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
001761  001965  //       : that requre to be interfaced with an external pointing
001762  001966  //       : device, values that are poked into TOUCH_DRIVE will be
001763  001967  //       : read with the touch_Get() function)
001764  001968        
001765  001969        
001766  001970  func touch_Get("mode"), 1;
001767  001971  // Syntax: touch_Get(mode);
001768  001972  // Usage : arg1 := touch_Get(arg);
001769  001973  // Notes : Returns various Touch Screen parameters to caller
001770  001974  //       :
001771  001975  //       : mode = TOUCH_STATUS  (mode 0)
001772  001976  //       : var := touch_Get(TOUCH_STATUS);
001773  001977  //       : Returns the various states of the touch screen
001774  001978  //       : 0 = NOTOUCH
001775  001979  //       : 1 = TOUCH_PRESSED
001776  001980  //       : 2 = TOUCH_RELEASED
001777  001981  //       : 3 = TOUCH_MOVING
001778  001982  //       :
001779  001983  //       : mode = TOUCH_GETX   (mode 1)
001780  001984  //       : var := touch_Get(TOUCH_GETX);
001781  001985  //       : Returns the X coordinates of the touch
001782  001986  //       :
001783  001987  //       : mode = TOUCH_GETY   (mode 2)
001784  001988  //       : var := touch_Get(TOUCH_GETY);
001785  001989  //       : Returns the Y coordinates of the touch
001786  001990        
001787  001991  //------------------------------------------------------------------//
001788  001992  //        CTYPE Function Prototypes
001789  001993  //------------------------------------------------------------------//
001790  001994        
001791  001995  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
001792  001996  // Syntax: isdigit("char");
001793  001997  // Usage : Var := isdigit(ch);
001794  001998  // Notes : char specifies the ascii character for the test
001795  001999  //     : 0 : char is not an ascii digit.
001796  002000  //     : 1 : char is an ascii digit..
001797  002001  //     : Valid range is "0123456789"
001798  002002        
001799  002003  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
001800  002004  // Syntax: isxdigit("char");
001801  002005  // Usage : Var := isxdigit(ch);
001802  002006  // Notes : char specifies the ascii character for the test
001803  002007  //     : 0 : char is not an ascii hexadecimal digit.
001804  002008  //     : 1 : char is an ascii hexadecimal digit..
001805  002009  //     : Valid range is "0123456789ABCDEF"
001806  002010        
001807  002011  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
001808  002012  // Syntax: isupper("char");
001809  002013  // Usage : Var := isupper(ch);
001810  002014  // Notes : char specifies the ascii character for the test
001811  002015  //     : 0 : char is not an ascii upper-case letter.
001812  002016  //     : 1 : char is an ascii upper-case letter.
001813  002017  //     : Valid range is "ABCD....WXYZ"
001814  002018        
001815  002019  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
001816  002020  // Syntax: islower("char");
001817  002021  // Usage : Var := islower(ch);
001818  002022  // Notes : char specifies the ascii character for the test
001819  002023  //     : 0 : char is not an ascii lower-case letter.
001820  002024  //     : 1 : char is an ascii lower-case letter.
001821  002025  //     : Valid range is "abcd....wxyz"
001822  002026        
001823  002027  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
001824  002028  // Syntax: isalpha("char");
001825  002029  // Usage : Var := isalpha(ch);
001826  002030  // Notes : char specifies the ascii character for the test
001827  002031  //     : 0 : char is not an ascii lower or upper case letter.
001828  002032  //     : 1 : char is an ascii lower or upper case letter.
001829  002033  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
001830  002034        
001831  002035  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
001832  002036  // Syntax: isalnum("char");
001833  002037  // Usage : Var := isalnum(ch);
001834  002038  // Notes : char specifies the ascii character for the test
001835  002039  //     : 0 : char is not an ascii alphanumeric character.
001836  002040  //     : 1 : char is an ascii alphanumeric character.
001837  002041  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
001838  002042        
001839  002043  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
001840  002044  // Syntax: isprint("char");
001841  002045  // Usage : Var := isprint(ch);
001842  002046  // Notes : char specifies the ascii character for the test
001843  002047  //     : 0 : char is not a printable ascii character.
001844  002048  //     : 1 : char is a printable ascii character.
001845  002049  //     : Valid range is "0x20...0x7F"
001846  002050        
001847  002051  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
001848  002052  // Syntax: isspace("char");
001849  002053  // Usage : Var := isspace(ch);
001850  002054  // Notes : char specifies the ascii character for the test
001851  002055  //     : 0 : char is not a space type character.
001852  002056  //     : 1 : char is a space type character.
001853  002057  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
001854  002058        
001855  002059  //unformatted
001856  002060  func iswhite("char"), 1;    //
001857  002061  // Syntax: iswhite("char");
001858  002062  // Usage : Var := iswhite(ch);
001859  002063  // Notes : char specifies the ascii character for the test
001860  002064  //     : 0 : char is not a space or tab character.
001861  002065  //     : 1 : char is not a space or tab character.
001862  002066  //     : Valid range is space or tab
001863  002067        
001864  002068  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
001865  002069  // Syntax: toupper("char");
001866  002070  // Usage : Var := toupper(ch);
001867  002071  // Notes : char specifies the ascii character for the test
001868  002072  //     : "ABCD....XYZ" : if character is a lower case letter.
001869  002073  //     : char : if character is not a lower case letter.
001870  002074  //     : Valid range is "abcd....wxyz"
001871  002075        
001872  002076  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
001873  002077  // Syntax: tolower("char");
001874  002078  // Usage : Var := tolower(ch);
001875  002079  // Notes : char specifies the ascii character for the test
001876  002080  //     : "abcd....xyz" : if character is an upper case letter.
001877  002081  //     : char : if character is not an upper case letter.
001878  002082  //     : Valid range is "ABCD....WXYZ"
001879  002083        
001880  002084  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
001881  002085  // Syntax: LObyte(var);
001882  002086  // Usage : myVar := LObyte(myvar2);
001883  002087  // Notes : var specifies the user variable
001884  002088  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
001885  002089        
001886  002090  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
001887  002091  // Syntax: HIbyte(var);
001888  002092  // Usage : myVar := HIbyte(myvar2);
001889  002093  // Notes : var specifies the user variable
001890  002094  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
001891  002095        
001892  002096        
001893  002097  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
001894  002098  // Syntax: ByteSwap(var);
001895  002099  // Usage : myVar := ByteSwap(myvar2);
001896  002100  // Notes : var specifies the user variable
001897  002101  //     : Returns the endian swapped value of a 16 bit variable
001898  002102        
001899  002103        
001900  002104  //------------------------------------------------------------------//
001901  002105  //        Memory Allocation Function Prototypes
001902  002106  //------------------------------------------------------------------//
001903  002107        
001904  002108  func mem_Alloc("size"), 1;
001905  002109  // Syntax: mem_Alloc(bytesize);
001906  002110  // Usage : myvar := mem_Alloc(100);
001907  002111  // Notes : Allocate a block of memory to pointer myvar
001908  002112  //       : The allocated memory contains garbage but is a fast allocation.
001909  002113  //       : The block must later be released with mem_Free();
001910  002114  //       : returns 0 if function fails
001911  002115        
001912  002116  func mem_AllocV("size"), 1;
001913  002117  // Syntax: mem_AllocV(bytesize);
001914  002118  // Usage : myvar := mem_AllocV(100);
001915  002119  // Notes : Allocate a block of memory to pointer myvar
001916  002120  //       : The block of memory is filled with signature values
001917  002121  //       : the block starts with A5,5A then fills with incrementing
001918  002122  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
001919  002123  //       : This can be helpful when debugging
001920  002124  //       : The block must later be released with mem_Free();
001921  002125  //       : returns 0 if function fails
001922  002126        
001923  002127  func mem_AllocZ("size"), 1;
001924  002128  // Syntax: mem_AllocZ(bytesize);
001925  002129  // Usage : myvar := mem_AllocC(100);
001926  002130  // Notes : Allocate a zeroed block of memory to pointer myvar
001927  002131  //       : The block of memory is filled with zeroes
001928  002132  //       : The block must later be released with mem_Free();
001929  002133  //       : returns 0 if function fails
001930  002134        
001931  002135  func mem_Realloc("ptr", "size"), 1;
001932  002136  // Syntax: myvar := mem_Realloc("ptr", "size");
001933  002137  // Usage : myvar := mem_Realloc(ptr, size);
001934  002138  // Notes : The function may move the memory block to a new location,
001935  002139  //       : in which case the new location is returned.
001936  002140  //       : The content of the memory block is preserved up to the lesser
001937  002141  //       : of the new and old sizes, even if the block is moved.
001938  002142  //       : If the new size is larger, the value of the newly allocated
001939  002143  //       : portion is indeterminate. In case that ptr is NULL,
001940  002144  //       : the function behaves exactly as mem_Alloc, assigning a new block
001941  002145  //       : of size bytes and returning a pointer to the beginning of it.
001942  002146  //       : In case that the size is 0, the memory previously allocated in
001943  002147  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
001944  002148  //       : pointer is returned.
001945  002149        
001946  002150  func mem_Free("allocation"), 1;
001947  002151  // Syntax: myvar := mem_Free(allocation);
001948  002152  // Usage : myvar := mem_Free(myvar);
001949  002153  // Notes : De-allocate a block of memory previously created with
001950  002154  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
001951  002155  //       : returns 0 if function fails
001952  002156        
001953  002157  func mem_Heap(), 1;
001954  002158  // Syntax: myvar := mem_Heap();
001955  002159  // Usage : myvar := mem_Heap();
001956  002160  // Notes : returns bytecount available in heap
001957  002161  //       :
001958  002162        
001959  002163  func mem_Set("ptr","char","size"), 1;
001960  002164  // Syntax: mem_Set(ptr,char,bytesize);
001961  002165  // Usage : mem_Set(p, 'A', 100);
001962  002166  // Notes : fill a block of memory with a byte value
001963  002167  //       : returns ptr
001964  002168        
001965  002169  func mem_Copy("src", "dest", "bytecount"), 1;
001966  002170  // Syntax: myvar := mem_Copy(src, dest, bytesize);
001967  002171  // Usage : myvar := mem_Copy(p1, p2, 100);
001968  002172  // Notes : copy a word aligned block of memory from src to dest
001969  002173  //       : Note that count is a byte count, this facilitates
001970  002174  //       : copying word aligned byte arrays when using word
001971  002175  //       : aliggned packed strings.
001972  002176  //       : returns src
001973  002177        
001974  002178  func mem_Compare("ptr1","ptr2","count"), 1;
001975  002179  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
001976  002180  // Usage : myvar := mem_Compare(p1, p2, 100);
001977  002181  // Notes : compare blocks of memory at src, dest
001978  002182  //       : returns 0 if we have a match
001979  002183        
001980  002184  //------------------------------------------------------------------//
001981  002185  //        FAT16 Function Prototypes
001982  002186  //------------------------------------------------------------------//
001983  002187        
001984  002188  func file_Error(), 1;
001985  002189  // Syntax: myvar := file_Error();
001986  002190  // Usage : e := file_Error();
001987  002191  // Notes : return the most recent file error.
001988  002192  //       :
001989  002193        
001990  002194  func file_Count("filename"), 1;
001991  002195  // Syntax: count := file_Count("filename");
001992  002196  // Usage : count := file_Count("*.4dg");
001993  002197  // Notes : returns number of files found that match the criteria
001994  002198        
001995  002199  func file_Dir("filename"), 1;
001996  002200  // Syntax: count := file_Dir("filename");
001997  002201  // Usage : count := file_Dir("*.4dg");
001998  002202  // Notes : streams a string of filenames that agree with the search key
001999  002203  //       : returns number of files found that match the criteria
002000  002204        
002001  002205  func file_FindFirst("fname"), 1;
002002  002206  // Syntax: res := file_FindFirst("fname");
002003  002207  // Usage : if (file_FindFirst("*.4xe") ....
002004  002208  // Notes : returns true if at least 1 file exists
002005  002209  //       : that satisfies the file argument.
002006  002210  //       : Wildcards are usually used so if
002007  002211  //       : file_FindFirst returns true, further
002008  002212  //       : tests can be made using file_FindNext();
002009  002213  //       : to find all the files that match the
002010  002214  //       : wildcard class. Note that the stream behaviour
002011  002215  //       : is the same as file_Dir.
002012  002216  //       :
002013  002217        
002014  002218  func file_FindNext(), 1;
002015  002219  // Syntax: res := file_FindNext();
002016  002220  // Usage : while ((file_FindNext()) ....
002017  002221  // Notes : returns true if more file exists
002018  002222  //       : that satisfies the file argument
002019  002223  //       : that was given for  file_FindFirst.
002020  002224  //       : Wildcards must be used for
002021  002225  //       : file_FindFirst, else this function will
002022  002226  //       : always return zero as the only occurence
002023  002227  //       : will have already been found.
002024  002228  //       : Note that the stream behaviour
002025  002229  //       : is the same as file_Dir.
002026  002230  //       :
002027  002231        
002028  002232  func file_Exists("fname"), 1;
002029  002233  // Syntax: res := file_Exists("fname"),
002030  002234  // Usage : if(file_Exists("myfile") ....
002031  002235  // Notes : returns true if file exists
002032  002236  //       :
002033  002237        
002034  002238  func file_Open("fname", "mode"), 1;
002035  002239  // Syntax: handle := file_Open("fname","mode"),
002036  002240  // Usage : handle := file_Open("myfile.txt", 'r');
002037  002241  // Notes : returns handle if file exists
002038  002242  //       :
002039  002243        
002040  002244  func file_Close("handle"), 1;
002041  002245  // Syntax: res := file_Close("handle");
002042  002246  // Usage : res := file_Close(hnd1);
002043  002247  // Notes : returns true if file closed ok
002044  002248  //       :
002045  002249        
002046  002250  func file_Read("*dest", "size", "handle"), 1;
002047  002251  // Syntax: res := file_Read("*dest", "size", "handle"),
002048  002252  // Usage : res := file_Read(memblock,20,hnd1);
002049  002253  // Notes : returns number of characters read
002050  002254  //       : if "dest" is zero, data is read direct to GRAM window
002051  002255  //       :
002052  002256        
002053  002257        
002054  002258  func file_Seek("handle", "HiWord", "LoWord"), 1;
002055  002259  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
002056  002260  // Usage : res := file_Seek(hSource, 0, 0x1234);
002057  002261  // Notes : set file position to 0x00001234 (byte position 4660)
002058  002262  //       : for the file handle so subsequent data may be read
002059  002263  //       : from that position onwards with file_GetC(...),
002060  002264  //       : file_GetW(...) or file_GetS(...), or an image
002061  002265  //       : can be displayed with file_Image(...)
002062  002266  // Notes : returns true if ok, usually ignored
002063  002267        
002064  002268  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
002065  002269  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
002066  002270  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
002067  002271  // Notes : set file seek position to 123000
002068  002272  //       : for the file handle so subsequent data may be read
002069  002273  //       : from that record position onwards with file_GetC(...),
002070  002274  //       : file_GetW(...) or file_GetS(...), or an image
002071  002275  //       : can be displayed with file_Image(...)
002072  002276  // Notes : returns true if ok, usually ignored
002073  002277        
002074  002278  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
002075  002279  // Syntax: file_Tell("handle", &HiWord, &LoWord);
002076  002280  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
002077  002281  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
002078  002282  //       : returns true if function succeeded
002079  002283        
002080  002284  func file_Write("*source", "size", "handle"), 1;
002081  002285  // Syntax: res := fwrite("*source", "size", "handle"),
002082  002286  // Usage : res := fwrite(memblock, 20, hnd1);
002083  002287  // Notes : returns number of bytes written
002084  002288  //       :
002085  002289        
002086  002290  func file_Size("handle", "&HiWord", "&LoWord"), 1;
002087  002291  // Syntax: file_Size("handle", &HiWord, &LoWord);
002088  002292  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
002089  002293  // Notes : Reads the 32 bit file size and stores it into 2 variables.
002090  002294  //       : returns true if function succeeded
002091  002295        
002092  002296  func file_Image("x", "y", "handle"), 1;
002093  002297  // Syntax: file_Image(x, y, handle);
002094  002298  // Usage : file_Image(10, 10, hnd1);
002095  002299  // Notes : Display an image from a file at the current file position.
002096  002300  //       : The image is displayed at x,y (with respect to top left corner).
002097  002301  //       : If there is more than 1 image in the file, it can be
002098  002302  //       : accessed with file_Seek(...)
002099  002303        
002100  002304  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
002101  002305  // Syntax: file_ScreenCapture(x, y, w, h, handle);
002102  002306  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
002103  002307  // Notes : Save a image from screen to file at the current file position.
002104  002308  //       : The image can later be displayed with file_Image(...);
002105  002309  //       : The file may be opened in append mode to accumulate multiple
002106  002310  //       : images. Later, the images can be accessed with file_Seek(...);
002107  002311  //       : Note that the image will be sector aligned.
002108  002312  //       : All image headers must start on a sector boundary.
002109  002313  //       : The image is saved from x, y (with respect to top left corner)
002110  002314  //       : and the capture area is determined by "width" and "height".
002111  002315  //       : returns 0 if function succeeded
002112  002316        
002113  002317  func file_PutC("char","handle"), 1;
002114  002318  // Syntax: file_PutC("char", "handle");
002115  002319  // Usage : file_PutC('x', hndl);
002116  002320  // Notes : returns true if function succeeded
002117  002321        
002118  002322  func file_GetC("handle"), 1;
002119  002323  // Syntax: file_GetC("handle");
002120  002324  // Usage : mychar := fgetC("handle");
002121  002325  // Notes : returns next char from file
002122  002326        
002123  002327  func file_PutW("word","handle"), 1;
002124  002328  // Syntax: file_PutW("word","handle");
002125  002329  // Usage : file_PutW(0x1234, hndl);
002126  002330  // Notes : returns true if function succeeded
002127  002331        
002128  002332  func file_GetW("handle"), 1;
002129  002333  // Syntax: file_GetW("handle");
002130  002334  // Usage : myword := fgetW("handle");
002131  002335  // Notes : returns next word in file
002132  002336        
002133  002337  func file_PutS("*source", "handle"), 1;
002134  002338  // Syntax: res := file_Puts("*source", "handle"),
002135  002339  // Usage : res := file_Puts(mystring, hnd1);
002136  002340  // Notes : returns number of characters written
002137  002341  //       :
002138  002342        
002139  002343  func file_GetS("*string", "size", "handle"), 1;
002140  002344  // Syntax: res := file_Gets("*string", "size", "handle");
002141  002345  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
002142  002346  // Notes : get a string from a file
002143  002347  //       : returns pointer to string or null if failed.
002144  002348  //       : file_GetS(...) automatically appends a null-terminator to the data read.
002145  002349  //       : NB:- only reads up to "size-1" characters into "string"
002146  002350  //       : file_GetS(...) will stop reading when any of the following conditions are true:
002147  002351  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
002148  002352  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
002149  002353  //       : C] It reaches the end of file
002150  002354  //       : D] A read error occurs.
002151  002355        
002152  002356        
002153  002357  func file_Erase("fname"), 1;
002154  002358  // Syntax: res := file_Erase("fname");
002155  002359  // Usage : res := file_Erase("myfile.txt");
002156  002360  // Notes : returns true if successful
002157  002361  //       :
002158  002362        
002159  002363  func file_Rewind("handle"), 1;
002160  002364  // Syntax: res := file_Rewind("handle");
002161  002365  // Usage : res := file_Rewind(hnd1);
002162  002366  // Notes : returns true if file rewound ok (usually ignored)
002163  002367  //       : resets the file pointer the the beginning of the open file.
002164  002368        
002165  002369  func file_LoadFunction("fname.4xe"), 1;
002166  002370  // Syntax: res := file_LoadFunction("fname.4fn");
002167  002371  // Usage : myfunc := file_LoadFunction(myfuncname);
002168  002372  // Notes : Load a function or program from disk and
002169  002373  //       : return a function pointer to the allocation.
002170  002374  //       : The function can then be invoked just like any other
002171  002375  //       : function would be called via a function pointer.
002172  002376  //       : Parameters may be passed to it in a conventional way.
002173  002377  //       : The function may be discarded at any time when no
002174  002378  //       : longer required, thus freeing its memory resources.
002175  002379  //       : The loaded function can be discarded with mem_Free(..)
002176  002380  //       : eg:
002177  002381  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
002178  002382  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
002179  002383  //       : then elsewhere in your program:-
002180  002384  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
002181  002385  //       : if(res == QUIT_APPLICATION) goto exitApp;
002182  002386  //       : Later in your program, when popupWindow is no longer
002183  002387  //       : required for the application:-
002184  002388  //       : res := mem_Free(popupWindow);
002185  002389  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
002186  002390  //       : The callers stack is shared by the loaded function,
002187  002391  //       : however any global variables in the loaded function
002188  002392  //       : are private to that function.
002189  002393  //
002190  002394        
002191  002395  func file_Run("fname.4xe", "arglistptr"), 1;
002192  002396  // Syntax: res := file_Run("fname.4xe","arglistptr");
002193  002397  // Usage : res := file_Run(fname, argptr);
002194  002398  // Notes : current program releases any allocated memory but
002195  002399  //       : retains the stack and global memory.
002196  002400  //       : If arglistptr is 0, no arguments are passed, else
002197  002401  //       : arglist points to an array, the first element being
002198  002402  //       : the number of elements in the array.
002199  002403  //       : func 'main' in the called program accepts
002200  002404  //       : the arguments, if any. THe arguments can only
002201  002405  //       : be passed by value, no pointers or references can be
002202  002406  //       : used as all memory is cleared before the file
002203  002407  //       : is loaded. Refer to file_Exec and file_LoadFunction
002204  002408  //       : for functions that can pass by reference.
002205  002409        
002206  002410  func file_Exec("fname.4xe", "arglistptr"), 1;
002207  002411  // Syntax: res := file_Exec("fname.4xe","arglistptr");
002208  002412  // Usage : res := file_Exec("fname.4xe","arglistptr");
002209  002413  // Notes : returns like a function, current program
002210  002414  //       : calling program is kept active and control returns to it.
002211  002415  //       : If arglistptr is 0, no arguments are passed, else
002212  002416  //       : arglist points to an array, the first element being
002213  002417  //       : the number of elements in the array.
002214  002418  //       : func 'main' in the called program accepts the arguments.
002215  002419  //       : This function is similar to file_LoadFunction(...), however,
002216  002420  //       : the function argument list is passed by pointer, and
002217  002421  //       : the memory consumed by the function is released as
002218  002422  //       : soon as the function completes.
002219  002423        
002220  002424  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
002221  002425  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
002222  002426  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
002223  002427  // Notes : Reads a control file to create an image list.
002224  002428  //       : Returns NULL if function fails.
002225  002429  //       : Returns a handle (pointer to the memory allocation) to the
002226  002430  //       : image control list that has been created.
002227  002431  //       : "fname1" is the control list filename "*.dat"
002228  002432  //       : "fname2" is the image filename "*.gci"
002229  002433        
002230  002434  // Notes : This function Calculates the size of a chunk of memory required for
002231  002435  //       : a image list and populates it from the image control file ("*.dat")
002232  002436  //       : therefore, when imagelist is no longer required, you must de-allocate
002233  002437  //       : the image list memory by using eg:- mem_Free(hImagelist);
002234  002438  //       : to restore the heap.
002235  002439  //       :
002236  002440  //       : mode 0:- it is assumed that there is a graphics file with the
002237  002441  //       : file extension "fname2.gci". In this case, the images have been stored
002238  002442  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
002239  002443  //       : "fname1.dat" file are saved in the image control so that the image control
002240  002444  //       : can open the file (*.gci) and us file_Seek to get to the position of the
002241  002445  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
002242  002446  //       : mode 0 builds the image control quickly as it only scans the *.dat file
002243  002447  //       : for the file offsets and save them in the relevant entries in the image control.
002244  002448  //       : The penalty is that images take longer to find when displayed due to file_Seek
002245  002449  //       : overheads.
002246  002450  //
002247  002451  //       : mode 1:- it is assumed that there is a graphics file with the
002248  002452  //       : file extension "fname2.gci". In this case, the images have been stored
002249  002453  //       : in a FAT16 file concurrently, and the offset of the images are saved
002250  002454  //       : in the image control so that image file (*.gci) can be mapped to directly.
002251  002455  //       : The absolute cluster/sector is mapped so file seek does not need to be called
002252  002456  //       : internally. This means that there is no seek time penalty, however, the
002253  002457  //       : image list takes a lot longer to build, as all the seeking is done at control
002254  002458  //       : build time.
002255  002459        
002256  002460  //       : mode 2:- the graphics file with the is placed in a partitioned area
002257  002461  //       : In this case, the images have been stored in a in a known raw area of the FAT16
002258  002462  //       : disk, and the absolute address of the images are saved in the DAT file
002259  002463  //       : This is the fastest operation of the image control as there is no seeking
002260  002464  //       : or other disk activity taking place.
002261  002465        
002262  002466  func file_Mount(), 1;
002263  002467  // Syntax: r := file_Mount();
002264  002468  // Usage : r := file_Mount();
002265  002469  // Notes : Create a control block for FAT16 and mount the File System
002266  002470        
002267  002471  func file_Unmount(), 0;
002268  002472  // Syntax: file_Unmount();
002269  002473  // Usage : file_Unmount();
002270  002474  // Notes : release any control block and buffers for FAT16
002271  002475  //       : and unmount the File System
002272  002476        
002273  002477  func file_PlayWAV("fname1"), 1;
002274  002478  // Syntax: file_PlayWAV("fname1");
002275  002479  // Usage : file_PlayWAV("ding.wav");
002276  002480  // Notes : Play a wave file with filename "fname1"
002277  002481  //       : This function automatically grabs a chunk
002278  002482  //       : of memory for a file buffer, and a wave
002279  002483  //       : buffer. The minimum memory requirement is
002280  002484  //       : about 580 bytes for the disk io service and
002281  002485  //       : a minimum wave buffer size of 1024. The siz
002282  002486  //       : of the wave buffer allocation
002283  002487  //       : can be increased by the snd_BufSize function.
002284  002488  //       : The default size 1024 bytes.
002285  002489  //       : NB the memory is only required during the
002286  002490  //       : duration of play, and is automatically
002287  002491  //       : released while not in use.
002288  002492  //       : See the Sound Class services for other associated controls.
002289  002493  //       : If there are no errors, returns number of blocks to play (1 to 32767)
002290  002494  //       : If errors occured, the folling is returned
002291  002495  //       : -7  : Insufficient memory available for WAV buffer and file
002292  002496  //       : -6  : cant play this rate
002293  002497  //       : -5  : no data chunk found in first rsector
002294  002498  //       : -4  : no format data
002295  002499  //       : -3  : no wave chunk signature
002296  002500  //       : -2  : bad wave file format
002297  002501  //       : -1  : file not found
002298  002502        
002299  002503        
002300  002504        
002301  002505  //------------------------------------------------------------------//
002302  002506  //        Sound Class Services
002303  002507  //------------------------------------------------------------------//
002304  002508        
002305  002509  func snd_Volume("var"), 0;
002306  002510  // Syntax: snd_Volume("var");
002307  002511  // Usage : snd_Volume(30);
002308  002512  // Notes : set sound playback volume.  Var must
002309  002513  //       : be in the range from 8 (min volume)
002310  002514  //       : to 127 (max volume). If var is less
002311  002515  //       : than 8 volume is set to 8, and if
002312  002516  //       : var > 127 it is set to 127.
002313  002517        
002314  002518  func snd_Pitch("pitch"), 1;
002315  002519  // func snd_Pitch("freq"), 1;
002316  002520  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
002317  002521  // Notes : sets the samples playback rate to a different frequency
002318  002522  //       : The minimum value is 4khz
002319  002523  //       : Setting the pitch to zero restores the original sample rate
002320  002524  //       : Return value is the samples original sample rate.
002321  002525        
002322  002526  func snd_BufSize("var"), 0;
002323  002527  // Syntax: snd_BufSize("var");
002324  002528  // Usage : snd_BufSize(2);
002325  002529  // Notes : specify the a memory chunk size for the wavefile buffer.
002326  002530  //       : default size 1024 bytes.
002327  002531  //       : 0 = 1024 bytes (default)
002328  002532  //       : 1 = 2048 bytes
002329  002533  //       : 2 = 4096 bytes
002330  002534  //       : 3 = 8192 bytes
002331  002535        
002332  002536  func snd_Stop(), 0;
002333  002537  // Syntax: snd_Stop();
002334  002538  // Usage : snd_Stop();
002335  002539  // Notes : stop any sound that is playing, releasing
002336  002540  //       : buffers and closes any open wav file.
002337  002541        
002338  002542  func snd_Pause(), 0;
002339  002543  // Syntax: snd_Pause();
002340  002544  // Usage : snd_Pause();
002341  002545  // Notes : pauses any sound that is playing, does nothing
002342  002546  //       : until sound is resumed with snd_Continue().
002343  002547  //       : The sample cam be terminated with snd_Stop.
002344  002548  //       : buffers and closes any open wav file.
002345  002549        
002346  002550  func snd_Continue(), 0;
002347  002551  // Syntax: snd_Continue();
002348  002552  // Usage : snd_Continue();
002349  002553  // Notes : resume any sound that is paused by snd_Pause.
002350  002554        
002351  002555  func snd_Playing(), 1;
002352  002556  // Syntax: snd_Playing();
002353  002557  // Usage : r := snd_Playing();
002354  002558  // Notes : returns 0 if sound has finished playing,
002355  002559  //       : else return number of 512 byte blocks to go.
002356  002560        
002357  002561        
002358  002562        
002359  002563  //------------------------------------------------------------------//
002360  002564  //        String Class Services
002361  002565  //------------------------------------------------------------------//
002362  002566        
002363  002567  func str_Ptr("&var"), 1;
002364  002568  // Syntax: str_Ptr(&var);
002365  002569  // Usage : p := str_Ptr(&var);
002366  002570  // Notes : return a byte pointer to a word region
002367  002571        
002368  002572  func str_GetD("&ptr", "&var"), 1;
002369  002573  // Syntax: str_GetD(&ptr, &var);
002370  002574  // Usage : ok := str_GetD(&ptr, &var);
002371  002575  // Notes : convert number in a string to DWORD ( myvar[2] )
002372  002576  //       : returns true if function succeeds, advancing ptr
002373  002577        
002374  002578  func str_GetW("&ptr", "&var"), 1;
002375  002579  // Syntax: str_GetW(&ptr, &var);
002376  002580  // Usage : ok := str_GetW(&ptr, &var);
002377  002581  // Notes : convert number in a string to WORD ( myvar )
002378  002582  //       : returns true if function succeeds, advancing ptr
002379  002583        
002380  002584  func str_GetHexW("&ptr", "&var"), 1;
002381  002585  // Syntax: str_GetHexW(&ptr, &var);
002382  002586  // Usage : ok := str_GetHexW(&ptr, &var);
002383  002587  // Notes : convert HEX number in a string to WORD ( myvar )
002384  002588  //       : returns true if function succeeds, advancing ptr
002385  002589        
002386  002590  func str_GetC("&ptr", "&var"), 1;
002387  002591  // Syntax: str_GetC(&ptr, &var);
002388  002592  // Usage : ok := str_GetC(&ptr, &var);
002389  002593  // Notes : get a valid ascii char in a string to WORD ( myvar )
002390  002594  //       : returns true if function succeeds, advancing ptr
002391  002595        
002392  002596  func str_GetByte("ptr"), 1;
002393  002597  // Syntax: str_GetByte(ptr);
002394  002598  // Usage : myvar := str_GetByte(ptr);
002395  002599  // Notes : get a byte to myvar
002396  002600  //       : returns value
002397  002601        
002398  002602  func str_GetWord("ptr"), 1;
002399  002603  // Syntax: GetWord(ptr);
002400  002604  // Usage : GetWord(ptr);
002401  002605  // Notes : get a word to myvar
002402  002606  //       : returns value
002403  002607        
002404  002608  func str_PutByte("ptr","val"), 0;
002405  002609  // Syntax: str_PutByte(ptr);
002406  002610  // Usage : myvar := str_PutByte(ptr);
002407  002611  // Notes : put a byte at ptr
002408  002612  //       : returns value
002409  002613        
002410  002614  func str_PutWord("ptr","val"), 0;
002411  002615  // Syntax: str_PutWord("ptr","val");
002412  002616  // Usage : str_PutWord(p,100);
002413  002617  // Notes : put word 100 at current pointer location
002414  002618  //       : returns value
002415  002619        
002416  002620  func str_Match("&ptr", "*str"), 1;
002417  002621  // Syntax: str_Match(&ptr, *str);
002418  002622  // Usage : r := str_Match(&p, "hello");
002419  002623  // Notes : Case sensitive match
002420  002624  //       : returns true if function succeded, andvancing pointer to position past
002421  002625  //       : the matched item. Note that any whitespace characters are skipped
002422  002626  //       : in the source string prior to the test.
002423  002627        
002424  002628  func str_MatchI("&ptr", "*str"), 1;
002425  002629  // Syntax: str_MatchI(&ptr, *str);
002426  002630  // Usage : r := str_MatchI(&p, "hello");
002427  002631  // Notes : Case insensitive match
002428  002632  //       : returns true if function succeded, andvancing pointer to position past
002429  002633  //       : the matched item. Note that any whitespace characters are skipped
002430  002634  //       : in the source string prior to the test.
002431  002635        
002432  002636  func str_Find("&ptr", "*str"), 1;
002433  002637  // Syntax: str_Find(&ptr, *str);
002434  002638  // Usage : n := str_Find(&p, "hello");
002435  002639  // Notes : given the address of a pointer to a source string as the
002436  002640  //       : first argument, and a pointer to a test string as the second
002437  002641  //       : argument, attempt to find the position of the matching string
002438  002642  //       : in the source string. The test is performed with case sensitivity.
002439  002643  //       : return 0 if not found, else returns the address of the first
002440  002644  //       : character of the match. NB:- The source pointer is not altered.
002441  002645        
002442  002646  func str_FindI("&ptr", "*str"), 1;
002443  002647  // Syntax: str_Find(&ptr, *str);
002444  002648  // Usage : n := str_Find(&p, "hello");
002445  002649  // Notes : given the address of a pointer to a source string as the
002446  002650  //       : first argument, and a pointer to a test string as the second
002447  002651  //       : argument, attempt to find the position of the matching string
002448  002652  //       : in the source string. The test is performed with no case
002449  002653  //       : sensitivity, eg upper and lower case chars are accepted.
002450  002654  //       : return 0 if not found, else returns the address of the first
002451  002655  //       : character of the match. NB:- The source pointer is not altered.
002452  002656        
002453  002657  func str_Length("ptr"), 1;
002454  002658  // Syntax: str_Length(ptr);
002455  002659  // Usage : len := str_Ptr(mystring);
002456  002660  // Notes : return the length of a byte aligned string excluding terminator
002457  002661        
002458  002662  func str_Printf("&ptr", "*format"), 1;
002459  002663  // Syntax: str_Printf("&ptr", "*format");
002460  002664  // Usage : r := str_Printf(&p, "%8s");
002461  002665  // Notes : refer to documentation
002462  002666  //       :
002463  002667        
002464  002668  func str_Cat("dest","src"), 1;
002465  002669  // Syntax: str_Append("&dest","&src");
002466  002670  // Usage : str_Append(&buf,"Hello");
002467  002671  // Notes : Appends a copy of the source string to the destination string.
002468  002672  //       : The terminating null character in destination is overwritten by
002469  002673  //       : the first character of source, and a new null-character is appended
002470  002674  //       : at the end of the new string formed by the concatenation of both in destination.
002471  002675  //       : returns destination.
002472  002676        
002473  002677  func str_CatN("dest","src","count"), 1;
002474  002678  // Syntax: str_Append("&dest","&src","count");
002475  002679  // Usage : str_Append(&buf,"Monday",3);
002476  002680  // Notes : Appends a copy of the source string to the destination string.
002477  002681  //       : The number of characters copied is limited by "count".
002478  002682  //       : The terminating null character in destination is overwritten by
002479  002683  //       : the first character of source, and a new null-character is appended
002480  002684  //       : at the end of the new string formed by the concatenation of both in destination.
002481  002685  //       : returns destination.
002482  002686        
002483  002687        
002484  002688  func sys_StoreTouchCalibration(), 1;
002485  002689  // Syntax: sys_StoreTouchCalibration();
002486  002690  // Usage : r := sys_StoreTouchCalibration();
002487  002691  // Notes : Store the touch calibration values in non-volatile memory.
002488  002692  //       : Returns true if the values have been accepted and stored,
002489  002693  //       : else returns false if write could not be performed, or
002490  002694  //       : touch calibration values are improbable.
002491  002695  //       : The values that are stored are obtained from:-
002492  002696  //     : TOUCH_XMINCAL             78  // touch calibration value
002493  002697  //     : TOUCH_YMINCAL             79  // touch calibration value
002494  002698  //       : TOUCH_XMAXCAL             80  // touch calibration value
002495  002699  //       : TOUCH_YMAXCAL             81  // touch calibration value
002496  002700  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
002497  002701  //       : This function is not supported on uVGA, Capicitive touch
002498  002702  //       : and 4.3" resistive touch modules.
002499  002703        
002500  002704        
002501  002705  func unicode_page("charbeg","charend","charoffset"), 1;
002502  002706  // Syntax: unicode_page("charbeg","charend","charoffset");
002503  002707  // Usage : eg:  F_Traditional_0x20_0xFF
002504  002708  // Notes : After selecting a unicode image control with txt_FontID,
002505  002709  //       : this function is called to set the required font within the
002506  002710  //       : unicode set. The file "Unicode.inc" contains wrappers for
002507  002711  //       : this function, and it is not normally called directly.
002508  002712  //       : Returns count of characters in the set.
002509  002713  //       : Refer to "Unicode.inc" for further information.
002510  002714        
002511  002715        
002512  002716  func EVE_SP(), 1;
002513  002717  // Syntax: EVE_SP();
002514  002718  // Usage : eg:  print(EVE_SP());
002515  002719  // Notes : Used for debugging to assess the current stack level,
002516  002720  //       : mainly for checking stack leaks
002517  002721        
002518  002722  func EVE_SSIZE(), 1;
002519  002723  // Syntax: EVE_SSIZE();
002520  002724  // Usage : eg:  print(EVE_SSIZE());
002521  002725  // Notes : Used to get the stack size,
002522  002726  //       : mainly for debugging purposes
002523  002727        
002524  002728        
002525  002729  // uVGAII extended functions
002526  002730  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
002527  002731  // Syntax: disp_Sync(line);
002528  002732  // Usage : disp_Sync(480);
002529  002733  // Notes : Waits till the hardware gets to a certain line.
002530  002734  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
002531  002735  //       : Some experimentation may be needed to find an optimum line for disp_Sync
002532  002736  //       : depending on the graphics operation. The higher the value, the slower
002533  002737  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
002534  002738  //       : within the vertical retrace period) where it will just 'hang up' stopping the
002535  002739  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
002536  002740  //       : be slowest (as its actually right at the end of the blanking period) and 508
002537  002741  //       : will cause a hangup situation as it is above the highes scanline value.
002538  002742  //       : Currently, this function is only supported on displays with SSD1963 driver.
002539  002743        
002540  002744        
002541  002745  // New functions added to PmmC v2.8
002542  002746  //================================================================
002543  002747  func CY(), 1;
002544  002748  // Syntax: CY();
002545  002749  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
002546  002750  //       : print(myvar," "CY(),"\n");           // carry = 1
002547  002751  // Notes : This function returns the carry status of an
002548  002752  // unsigned overflow from any 16 or 32bit additions or sutractions.
002549  002753  //================================================================
002550  002754        
002551  002755        
002552  002756  //================================================================
002553  002757  func str_ByteMove("src", "dest", "count"), 1;
002554  002758  // func str_ByteMove("src", "dest", "count"), 1;
002555  002759  // Syntax   : str_ByteMove(src, dest, bytecount);
002556  002760  // Input    : STR *source points to byte aligned source.
002557  002761  //          : STR *dest   points to byte aligned destination.
002558  002762  //          : VAR count   number of bytes to transfer.
002559  002763  // Usage    : nextpos := str_ByteMove(s, d, 100);
002560  002764  // Notes    : copy bytes from "src" to "dest", stopping only
002561  002765  //          : when "count" is exhausted.
002562  002766  //          : No terminator is appended, it is purely a
002563  002767  //          : byte copy, and any zeroes encountered will
002564  002768  //          : also be copied.
002565  002769  // Returns  : returns a pointer to the end of the destination
002566  002770  //          : (which is "dest" + "count")
002567  002771  //================================================================
002568  002772        
002569  002773        
002570  002774  //================================================================
002571  002775  func str_Copy("dest", "src"), 1;
002572  002776  // Syntax   : str_Copy(dest, src);
002573  002777  // Input    : STR *dest   points to byte aligned destination.
002574  002778  //          : STR *source points to byte aligned source.
002575  002779  // Usage    : nextplace := str_Copy(d, s);
002576  002780  // Notes    : copy a string from "src" to "dest", stopping only
002577  002781  //          : when the end of source string "src" is encountered
002578  002782  //          : (0x00 terminator).
002579  002783  //          : The terminator is always appended, even if "src" is
002580  002784  //          : an empty string.
002581  002785  // Returns  : returns a pointer to the 0x00 string terminator at
002582  002786  //          : end of "dest" (which is "dest" + str_Length(src); )
002583  002787  //================================================================
002584  002788        
002585  002789  //================================================================
002586  002790  func str_CopyN("dest", "src", "count"), 1;
002587  002791  // Syntax   : str_CopyN(dest, src, bytecount);
002588  002792  // Input    : STR *dest   points to byte aligned destination.
002589  002793  //          : STR *source points to byte aligned source.
002590  002794  //          : VAR count   max number of chars to copy.
002591  002795  // Usage    : nextplace := str_CopyN(d, s, 100);
002592  002796  // Notes    : copy a string from "src" to "dest", stopping only
002593  002797  //          : when "count" is exhausted, or end of source
002594  002798  //          : string "str" is encountered (0x00 string terminator).
002595  002799  //          : The terminator is always appended, even if
002596  002800  //          : "count" is zero, or "src" is a null string.
002597  002801  // Returns  : returns a pointer to the 0x00 string terminator
002598  002802  //          : (which is "dest" + whatever was copied)
002599  002803  //================================================================
002600  002804        
002601  002805  //================================================================
002602  002806  func umul_1616("&res32", "val1", "val2"), 1;
002603  002807  // Syntax   : umul_1616(&res32, varA, varB);
002604  002808  // Input    : DWORD *result   points to 32bit result register.
002605  002809  //          : VAR   val1  16bit register or constant
002606  002810  //          : VAR   val2  16bit register or constant
002607  002811  // Usage    : var res32[2];
002608  002812  //          : umul_1616(&res32, myvar, 50000);
002609  002813  // Notes    : performs an unsigned multiply of 2 x 16bit values
002610  002814  //          : placing the 32bit result in a 2 word array.
002611  002815  // Returns  : the pointer to the 32bit result.
002612  002816  //          : carry and overflow are not affected.
002613  002817  //================================================================
002614  002818        
002615  002819  //================================================================
002616  002820  func uadd_3232("&res32", "&val1", "&val2"), 1;
002617  002821  // Syntax   : cmp_3232(&res32, &varA, &varB);
002618  002822  // Input    : DWORD *res32 points to optional result (or zero for compare)
002619  002823  //          : DWORD *val1 points to 32bit augend
002620  002824  //          : DWORD *val2 points to 32bit addend
002621  002825  // Usage    : var res32[2];
002622  002826  //          : res := cmp_3232(res32, val1, val2);
002623  002827  // Notes    : performs an unsigned addition of 2 x 32bit values
002624  002828  //          : placing the 32bit result in a 2 word array.
002625  002829  // Returns  : returns 1 on 32bit unsigned overflow (carry).
002626  002830  //          ; carry flag is also set on 32bit unsigned overflow
002627  002831  //          ; and can be read with the CY() function.
002628  002832  //================================================================
002629  002833        
002630  002834  //================================================================
002631  002835  func usub_3232("&res32", "&val1", "&val2"), 1;
002632  002836  // Syntax   : cmp_3232(&res32, &varA, &varB);
002633  002837  // Input    : DWORD *res32 points to optional result (or zero for compare)
002634  002838  //          : DWORD *val1 points to first 32bit minuend
002635  002839  //          : DWORD *val2 points to 32bit subtrahend
002636  002840  // Usage    : var res32[2];
002637  002841  //          : res := cmp_3232(res32, val1, val2);
002638  002842  // Notes    : performs an unsigned subtraction of 2 x 32bit values
002639  002843  //          : placing the 32bit result in a 2 word array.
002640  002844  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
002641  002845  //          ; carry flag is also set on 32bit unsigned underflow
002642  002846  //          ; and can be read with the CY() function.
002643  002847  //================================================================
002644  002848        
002645  002849  //================================================================
002646  002850  func ucmp_3232("&val1", "&val2"), 1;
002647  002851  // Syntax   : cmp_3232(&varA, &varB);
002648  002852  // Input    : DWORD *val1 points to 32bit minuend
002649  002853  //          : DWORD *val2 points to 32bit sutrahend
002650  002854  // Usage    : res := cmp_3232(val1, val2);
002651  002855  // Notes    : performs an unsigned comparison of 2 x 32bit values.
002652  002856  //          : The result of the subtraction is returned.
002653  002857  // Returns  : 0  if equal
002654  002858  //          : 1  if val1 > val2
002655  002859  //          : -1 if val1 < val2
002656  002860  //          : This function does not affect the carry flag.
002657  002861  //================================================================
002658  002862        
002659  002863  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v3.8
002660  002864  // Syntax: disp_Disconnect();                  New in v3.8
002661  002865  // Usage : disp_Disconnect();
002662  002866  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
002663  002867  //       : its lowest possible power consumption. Use after disabling peripheral power
002664  002868  //       : to ensure the minimal power usage by the display.
002665  002869  //       : disp_Init() should be used to reinitialise the display.
002666  002870        
002667  002871  func reserved(), 0;                            
002668  002872        
002669  002873  func sys_DeepSleep("units"), 1;
002670  002874  // Syntax: t := sys_DeepSleep("units");       New in v3.8
002671  002875  // Usage : t := sys_DeepSleep(10);
002672  002876  // Notes : sets the display and processor into lowest power mode for a period of time.
002673  002877  //       : When returning from DeepSleep the display should be reinitialised
002674  002878  //       : with disp_Init().
002675  002879  //       : Touching the touch screen will also wake from sleep.
002676  002880  //       : Returns remaining sleep units.
002677  002881        
002678  002882  //------------------------------------------------------------------//
002679  002883  // CONSTANTS
002680  002884  //------------------------------------------------------------------//
002681  002885        
002682  002886  // generic constants
002683  002887  #CONST
002684  002896  #END
002685  002897        
002686  002898  //------------------------------------------------------------------------------
002687  002899  // Pin related constants
002688  002900  //------------------------------------------------------------------------------
002689  002901  #CONST
002690  002919  #END
002691  002920        
002692  002921  //------------------------------------------------------------------------------
002693  002922  //gfx_Set() related constants
002694  002923  //------------------------------------------------------------------------------
002695  002924  #CONST
002696  002941  #END
002697  002942        
002698  002943        
002699  002944  //gfx_Get() related constants
002700  002945  #CONST
002701  002954  #END
002702  002955        
002703  002956        
002704  002957        
002705  002958        
002706  002959  #CONST
002707  002972  #END
002708  002973        
002709  002974        
002710  002975  #CONST
002711  002998  #END
002712  002999        
002713  003000  //------------------------------------------------------------------------------
002714  003001  //txt_Set() related constants
002715  003002  //------------------------------------------------------------------------------
002716  003003  #CONST
002717  003022  #END
002718  003023        
002719  003024        
002720  003025        
002721  003026  //------------------------------------------------------------------------------
002722  003027  //txt_Set() related arguments
002723  003028  // NB:- FONT4 must be inherited if required,
002724  003029  // eg #inherit "FONT4.fnt"
002725  003030  //------------------------------------------------------------------------------
002726  003031  #CONST
002727  003043  #END
002728  003044        
002729  003045        
002730  003046        
002731  003047  //touch_Set() related constants
002732  003048  #CONST
002733  003052  #END
002734  003053        
002735  003054  //touch_Get() related constants
002736  003055  #CONST
002737  003063  #END
002738  003064        
002739  003065  // image control offset related constants
002740  003066  #CONST
002741  003073  #END
002742  003074        
002743  003075  // image attribute flags
002744  003076  // for img_SetAttributes(...) and img_ClearAttributes(...)
002745  003077  #CONST
002746  003091  #END
002747  003092        
002748  003093        
002749  003094  #constant ALL 0xFFFF // argument for img_xxx functions to update all images
002750  003094  #constant ALL 0xFFFF // argument for img_xxx functions to update all images
002751  003095        
002752  003096  // image control entry offsets
002753  003097  #CONST
002754  003112  #END
002755  003113        
002756  003114  #CONST
002757  003132  #END
002758  003133        
002759  003134        
002760  003135        
002761  003136        
002762  003137  #CONST
002763  003157  #END
002764  003158        
002765  003159        
002766  003160        
002767  003161  // timer control  related constants
002768  003162  #CONST
002769  003171  #END
002770  003172        
002771  003173  // I2C timing related constants
002772  003174  #CONST
002773  003178  #END
002774  003179        
002775  003180        
002776  003181  // spi_Init(...)  mode arguments
002777  003182  #CONST
002778  003192  #END
002779  003193        
002780  003194  //------------------------------------------------------------------------------
002781  003195  // system WORD variables accesible with peekW and pokeW or pointer access
002782  003196  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
002783  003197  // can also be accessed with peekW and pokeW
002784  003198  //------------------------------------------------------------------------------
002785  003199        
002786  003200  #CONST
002787  003294  #END
002788  003295        
002789  003296  //------------------------------------------------------------------------------
002790  003297  // FILEIO Error Code Constants
002791  003298  //------------------------------------------------------------------------------
002792  003299  #CONST
002793  003325  #END
002794  003326        
002795  003327  //==================================================================================================
002796  003328        
002797  003329        
002798  003330        
002799  000013      #ENDIF
002800  000014        
002801  000015        
002802  000016      #CONST
002803  000068      #END
002804  000069        
002805  000070        
002806  000071  //===========================================================================================
002807  000072        
002808  000073        
002809  000002        
002810  000003        
002811  000004  // generated 1/14/2022 7:41:42 PM
002812  000005        
002813  000006  #MODE RUNFLASH
002814  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

002815  000008  #inherit "4DGL_16bitColours.fnc"
002816  000008  #inherit "4DGL_16bitColours.fnc"
002817  000004  */
002818  000005        
002819  000006        
002820  000007        
002821  000008  #CONST
002822  000149  #END
002823  000150        
002824  000009        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

002825  000010  #inherit "VisualConst.inc"
002826  000010  #inherit "VisualConst.inc"
002827  000001  // Line Patterns
002828  000002  #constant  LPCOARSE    0xF0F0
002829  000002  #constant  LPCOARSE    0xF0F0
002830  000003  #constant  LPMEDIUM    0x3333
002831  000003  #constant  LPMEDIUM    0x3333
002832  000004  #constant  LPFINE      0xAAAA
002833  000004  #constant  LPFINE      0xAAAA
002834  000005  #constant  LPDASHDOT   0x03CF
002835  000005  #constant  LPDASHDOT   0x03CF
002836  000006  #constant  LPDASHDOTDOT 0x0333
002837  000006  #constant  LPDASHDOTDOT 0x0333
002838  000007  #constant  LPSOLID     0x0000
002839  000007  #constant  LPSOLID     0x0000
002840  000011        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\XYposToDegree.inc

002841  000012  #inherit "XYposToDegree.inc"
002842  000012  #inherit "XYposToDegree.inc"
002843  000001  //
002844  000002  // Routine to convert X/Y (Relative to 0,0) position into Degrees
002845  000003  // 0 Degrees is straight down to suit rotary objects
002846  000004  //
002847  000005        
002848  000017  #END
2849  006B
2850  006C
2851  006D
2852  006E
2853  006F
2854  0070
2855  0071
2856  0072
2857  0073
2858  0074
2859  0075
2860  0076
2861  0077
2862  0078
2863  0079
2864  007A
2865  007B
2866  007C
2867  007D
2868  007E
2869  007F
2870  0080
2871  0081
2872  0082
2873  0083
2874  0084
2875  0085
2876  0086
2877  0087
2878  0088
2879  0089
2880  008A
2881  008B
2882  008C
2883  008D
2884  008E
2885  008F
2886  0090
2887  0091
2888  0092
2889  0093
2890  0094
2891  0095
2892  0096
2893  0097
2894  0098
2895  0099
2896  009A
2897  009B
2898  009C
2899  009D
2900  009E
2901  009F
2902  00A0
2903  00A1
2904  00A2
2905  00A3
2906  00A4
2907  00A5
2908  00A6
2909  00A7
2910  00A8
2911  00A9
2912  00AA
2913  00AB
2914  00AC
2915  00AD
2916  00AE
2917  00AF
2918  00B0
2919  00B1
2920  00B2
2921  00B3
2922  00B4
2923  00B5
2924  00B6
2925  00B7
2926  00B8
2927  00B9
2928  00BA
2929  00BB
2930  00BC
2931  00BD
2932  00BE
2933  00BF
2934  00C0
2935  00C1
2936  00C2
2937  00C3
2938  00C4
2939  00C5
2940  00C6
2941  00C7
2942  00C8
2943  00C9
2944  00CA
2945  00CB
2946  00CC
2947  00CD
2948  00CE
2949  00CF
002950  000018        
002951  000019  func XYposToDegree(var curX, var curY)
002952  000020      var delta, deg, adj ;
002953  000021      if (curY < 0)
002954  000022          if (curX < 0)
002955  000023              adj := 1 ;
002956  000024              deg := 90 ;
002957  000025          else
002958  000026              adj := 2 ;
002959  000027              deg := 180 ;
002960  000028          endif
002961  000029      else
002962  000030          if (curX < 0)
002963  000031              deg := 0 ;
002964  000032              adj := 2 ;
002965  000033          else
002966  000034              deg := 270 ;
002967  000035              adj := 1 ;
002968  000036          endif
002969  000037      endif
002970  000038        
002971  000039      curX := ABS(curX) ;
002972  000040      curY := ABS(curY) ;
002973  000041      if (curX < curY)
002974  000042          adj &= 1 ;
002975  000043      else
002976  000044          adj &= 2 ;
002977  000045          SWAP(&curX, &curY) ;
002978  000046      endif
002979  000047      delta := arctan[(curX * 100) / curY] ;
002980  000048      if (adj)
002981  000049          deg += 90 - delta ;
002982  000050      else
002983  000051          deg += delta ;
002984  000052      endif
002985  000053        
002986  000054      return deg ;
002987  000055  endfunc
002988  000056        
002989  000013        
file C:\ReflowOven\4D-Display-UI\UI.4DWork\UIConst.inc

002990  000014  #inherit "UIConst.inc"
002991  000014  #inherit "UIConst.inc"
002992  000001  // File generated 1/14/2022 7:41:36 PM
002993  000002  // Warning! This is a generated file, any manual changes will be
002994  000003  // lost during the next generation.
002995  000004        
002996  000005  #constant  Strings0Count    1
002997  000005  #constant  Strings0Count    1
002998  000006  #constant  Strings0Size     5
002999  000006  #constant  Strings0Size     5
003000  000007  #constant  Strings1Count    0
003001  000007  #constant  Strings1Count    0
003002  000008  #constant  Strings1Size     1
003003  000008  #constant  Strings1Size     1
003004  000009  #constant  Strings2Count    0
003005  000009  #constant  Strings2Count    0
003006  000010  #constant  Strings2Size     1
003007  000010  #constant  Strings2Size     1
003008  000011  #constant  Strings3Count    0
003009  000011  #constant  Strings3Count    0
003010  000012  #constant  Strings3Size     1
003011  000012  #constant  Strings3Size     1
003012  000013  #constant  IFONT_OFFSET     0
003013  000013  #constant  IFONT_OFFSET     0
003014  000014  // object indexes into ImageControl
003015  000015  #CONST
003016  000033  #END
003017  000034        
003018  000035        
003019  000036  #constant  Strings0StartH   0x0
003020  000036  #constant  Strings0StartH   0x0
003021  000037  #constant  Strings0StartL   0x0
003022  000037  #constant  Strings0StartL   0x0
003023  000038  #constant  Strings1StartH   0x0
003024  000038  #constant  Strings1StartH   0x0
003025  000039  #constant  Strings1StartL   0x200
003026  000039  #constant  Strings1StartL   0x200
003027  000040  #constant  Strings2StartH   0x0
003028  000040  #constant  Strings2StartH   0x0
003029  000041  #constant  Strings2StartL   0x400
003030  000041  #constant  Strings2StartL   0x400
003031  000042  #constant  Strings3StartH   0x0
003032  000042  #constant  Strings3StartH   0x0
003033  000043  #constant  Strings3StartL   0x600
003034  000043  #constant  Strings3StartL   0x600
003035  000044        
003036  000045  #IFNOT EXISTS NOGLOBALS
003037  000046  var hndl ;
003038  000047  var hFonts[4] ;
003039  000048  #ENDIF
003040  000015        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

003041  000016  #inherit "CLPrintStrings.inc"
003042  000016  #inherit "CLPrintStrings.inc"
003043  000001  func PrintStrings(var ID, var *msgid, var String)
003044  000002      var StringID, i, ch, offs32[2], res32[2];
003045  000003      StringID := oStringss[1+ID] ;
003046  000004      if (String)
003047  000005          stringsCV[ID] := -1 ;
003048  000006      else
003049  000007          stringsCV[ID] := msgid ;
003050  000008      endif
003051  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
003052  000010      txt_FontID(hFonts[ID]) ;
003053  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
003054  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
003055  000013        
003056  000014      if (*(StringID + Ofs_String_Transparent))
003057  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
003058  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
003059  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
003060  000018      else
003061  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
003062  000020          gfx_Clipping(ON) ;
003063  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
003064  000022          gfx_Clipping(OFF) ;
003065  000023        
003066  000024      endif
003067  000025        
003068  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
003069  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
003070  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
003071  000029        
003072  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
003073  000031        
003074  000032      if (String)
003075  000033          i := 0 ;
003076  000034          ch := msgid[i++] ;
003077  000035          while (ch != 0)
003078  000036              putch(ch) ;
003079  000037              ch := msgid[i++] ;
003080  000038          wend
003081  000039      else
003082  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
003083  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
003084  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
003085  000043          uadd_3232(res32,res32,offs32) ;
003086  000044          file_Seek(hstrings, res32[1], res32[0]);
003087  000045          repeat
003088  000046              if (*(StringID + Ofs_String_Ansi))
003089  000047                  ch := file_GetC(hstrings) ;
003090  000048              else
003091  000049                  ch := file_GetW(hstrings) ;
003092  000050              endif
003093  000051              putch(ch) ;
003094  000052          until (ch == 0) ;
003095  000053      endif
003096  000054        
003097  000055  endfunc
003098  000056        
003099  000017        
003100  000018  #constant IPDatasize 22
003101  000018  #constant IPDatasize 22
003102  000019        
003103  000020  #CONST
003104  000024  #END
003105  000025        
003106  000026        
003107  000027        
003108  000028  #CONST
003109  000135  #END
003110  000136        
003111  000180  #END
3112  036D
3113  036E
3114  036F
3115  0370
3116  0371
3117  0372
3118  0373
3119  0374
3120  0375
3121  0376
3122  0377
3123  0378
3124  0379
3125  037A
3126  037B
3127  037C
3128  037D
3129  037E
3130  037F
3131  0380
3132  0381
3133  0382
3134  0383
3135  0384
3136  0385
3137  0386
3138  0387
3139  0388
3140  0389
3141  038A
3142  038B
3143  038C
3144  038D
3145  038E
3146  038F
3147  0390
3148  0391
3149  0392
3150  0393
3151  0394
3152  0395
3153  0396
3154  0397
3155  0398
3156  0399
3157  039A
3158  039B
3159  039C
3160  039D
3161  039E
3162  039F
3163  03A0
3164  03A1
3165  03A2
3166  03A3
3167  03A4
3168  03A5
3169  03A6
3170  03A7
3171  03A8
3172  03A9
3173  03AA
3174  03AB
3175  03AC
3176  03AD
3177  03AE
3178  03AF
3179  03B0
3180  03B1
3181  03B2
3182  03B3
3183  03B4
3184  03B5
3185  03B6
3186  03B7
3187  03B8
3188  03B9
3189  03BA
3190  03BB
3191  03BC
3192  03BD
3193  03BE
3194  03BF
3195  03C0
3196  03C1
3197  03C2
3198  03C3
3199  03C4
3200  03C5
3201  03C6
3202  03C7
3203  03C8
3204  03C9
3205  03CA
3206  03CB
3207  03CC
3208  03CD
3209  03CE
3210  03CF
3211  03D0
3212  03D1
3213  03D2
3214  03D3
3215  03D4
3216  03D5
3217  03D6
3218  03D7
3219  03D8
3220  03D9
3221  03DA
3222  03DB
3223  03DC
3224  03DD
3225  03DE
3226  03DF
3227  03E0
3228  03E1
3229  03E2
3230  03E3
3231  03E4
3232  03E5
3233  03E6
3234  03E7
3235  03E8
3236  03E9
3237  03EA
3238  03EB
3239  03EC
3240  03ED
3241  03EE
3242  03EF
3243  03F0
3244  03F1
3245  03F2
3246  03F3
3247  03F4
3248  03F5
3249  03F6
3250  03F7
3251  03F8
3252  03F9
3253  03FA
3254  03FB
3255  03FC
3256  03FD
3257  03FE
3258  03FF
3259  0400
3260  0401
3261  0402
3262  0403
3263  0404
3264  0405
3265  0406
3266  0407
3267  0408
3268  0409
3269  040A
3270  040B
3271  040C
3272  040D
3273  040E
3274  040F
3275  0410
3276  0411
3277  0412
3278  0413
3279  0414
3280  0415
3281  0416
3282  0417
3283  0418
3284  0419
3285  041A
3286  041B
3287  041C
3288  041D
3289  041E
3290  041F
3291  0420
3292  0421
3293  0422
3294  0423
3295  0424
3296  0425
3297  0426
3298  0427
3299  0428
3300  0429
3301  042A
3302  042B
3303  042C
3304  042D
3305  042E
3306  042F
3307  0430
3308  0431
3309  0432
3310  0433
3311  0434
3312  0435
3313  0436
3314  0437
3315  0438
3316  0439
3317  043A
3318  043B
3319  043C
3320  043D
3321  043E
3322  043F
3323  0440
3324  0441
3325  0442
3326  0443
3327  0444
3328  0445
3329  0446
3330  0447
3331  0448
3332  0449
3333  044A
3334  044B
3335  044C
3336  044D
3337  044E
3338  044F
3339  0450
3340  0451
3341  0452
3342  0453
3343  0454
3344  0455
3345  0456
3346  0457
3347  0458
3348  0459
3349  045A
3350  045B
3351  045C
3352  045D
3353  045E
3354  045F
3355  0460
3356  0461
3357  0462
3358  0463
3359  0464
3360  0465
3361  0466
3362  0467
3363  0468
3364  0469
3365  046A
3366  046B
3367  046C
3368  046D
3369  046E
3370  046F
3371  0470
3372  0471
3373  0472
3374  0473
3375  0474
3376  0475
3377  0476
3378  0477
3379  0478
3380  0479
3381  047A
3382  047B
3383  047C
3384  047D
3385  047E
3386  047F
3387  0480
3388  0481
3389  0482
3390  0483
3391  0484
3392  0485
3393  0486
3394  0487
3395  0488
3396  0489
3397  048A
3398  048B
3399  048C
3400  048D
3401  048E
3402  048F
3403  0490
3404  0491
3405  0492
3406  0493
3407  0494
3408  0495
3409  0496
3410  0497
3411  0498
3412  0499
3413  049A
3414  049B
3415  049C
3416  049D
3417  049E
3418  049F
3419  04A0
3420  04A1
3421  04A2
3422  04A3
3423  04A4
3424  04A5
3425  04A6
3426  04A7
3427  04A8
3428  04A9
3429  04AA
3430  04AB
3431  04AC
3432  04AD
3433  04AE
3434  04AF
3435  04B0
3436  04B1
3437  04B2
3438  04B3
3439  04B4
3440  04B5
3441  04B6
3442  04B7
3443  04B8
3444  04B9
3445  04BA
3446  04BB
3447  04BC
3448  04BD
3449  04BE
3450  04BF
3451  04C0
3452  04C1
3453  04C2
3454  04C3
3455  04C4
3456  04C5
3457  04C6
3458  04C7
3459  04C8
3460  04C9
3461  04CA
3462  04CB
3463  04CC
3464  04CD
3465  04CE
3466  04CF
3467  04D0
3468  04D1
3469  04D2
3470  04D3
3471  04D4
3472  04D5
3473  04D6
3474  04D7
3475  04D8
3476  04D9
3477  04DA
3478  04DB
3479  04DC
3480  04DD
3481  04DE
3482  04DF
3483  04E0
3484  04E1
3485  04E2
3486  04E3
3487  04E4
3488  04E5
3489  04E6
3490  04E7
3491  04E8
3492  04E9
3493  04EA
3494  04EB
3495  04EC
3496  04ED
3497  04EE
3498  04EF
3499  04F0
3500  04F1
3501  04F2
3502  04F3
3503  04F4
3504  04F5
3505  04F6
3506  04F7
3507  04F8
3508  04F9
3509  04FA
3510  04FB
3511  04FC
3512  04FD
3513  04FE
3514  04FF
3515  0500
3516  0501
3517  0502
3518  0503
3519  0504
3520  0505
3521  0506
3522  0507
3523  0508
3524  0509
3525  050A
3526  050B
3527  050C
3528  050D
3529  050E
3530  050F
3531  0510
3532  0511
3533  0512
3534  0513
3535  0514
3536  0515
3537  0516
3538  0517
3539  0518
3540  0519
3541  051A
3542  051B
3543  051C
3544  051D
3545  051E
3546  051F
3547  0520
3548  0521
3549  0522
3550  0523
3551  0524
3552  0525
3553  0526
3554  0527
3555  0528
3556  0529
3557  052A
3558  052B
3559  052C
3560  052D
3561  052E
3562  052F
3563  0530
3564  0531
3565  0532
3566  0533
3567  0534
3568  0535
3569  0536
3570  0537
3571  0538
3572  0539
3573  053A
3574  053B
3575  053C
3576  053D
3577  053E
3578  053F
3579  0540
3580  0541
3581  0542
3582  0543
3583  0544
3584  0545
3585  0546
3586  0547
3587  0548
3588  0549
3589  054A
3590  054B
3591  054C
3592  054D
3593  054E
3594  054F
3595  0550
3596  0551
3597  0552
3598  0553
3599  0554
3600  0555
3601  0556
3602  0557
3603  0558
3604  0559
3605  055A
3606  055B
3607  055C
3608  055D
3609  055E
3610  055F
3611  0560
3612  0561
3613  0562
3614  0563
3615  0564
3616  0565
3617  0566
3618  0567
3619  0568
3620  0569
3621  056A
3622  056B
3623  056C
3624  056D
3625  056E
3626  056F
3627  0570
3628  0571
3629  0572
3630  0573
3631  0574
3632  0575
3633  0576
3634  0577
3635  0578
3636  0579
3637  057A
3638  057B
3639  057C
3640  057D
3641  057E
3642  057F
3643  0580
3644  0581
3645  0582
3646  0583
3647  0584
3648  0585
3649  0586
3650  0587
3651  0588
3652  0589
3653  058A
3654  058B
3655  058C
3656  058D
3657  058E
3658  058F
3659  0590
3660  0591
3661  0592
3662  0593
3663  0594
3664  0595
3665  0596
3666  0597
3667  0598
3668  0599
3669  059A
3670  059B
3671  059C
3672  059D
3673  059E
3674  059F
3675  05A0
3676  05A1
3677  05A2
3678  05A3
3679  05A4
3680  05A5
3681  05A6
3682  05A7
3683  05A8
3684  05A9
3685  05AA
3686  05AB
3687  05AC
3688  05AD
3689  05AE
3690  05AF
3691  05B0
3692  05B1
3693  05B2
3694  05B3
3695  05B4
3696  05B5
3697  05B6
3698  05B7
3699  05B8
3700  05B9
3701  05BA
3702  05BB
3703  05BC
3704  05BD
3705  05BE
3706  05BF
3707  05C0
3708  05C1
3709  05C2
3710  05C3
3711  05C4
3712  05C5
3713  05C6
3714  05C7
3715  05C8
3716  05C9
3717  05CA
3718  05CB
3719  05CC
3720  05CD
3721  05CE
3722  05CF
3723  05D0
3724  05D1
3725  05D2
3726  05D3
3727  05D4
3728  05D5
3729  05D6
3730  05D7
3731  05D8
3732  05D9
3733  05DA
3734  05DB
3735  05DC
3736  05DD
3737  05DE
3738  05DF
3739  05E0
3740  05E1
3741  05E2
3742  05E3
3743  05E4
3744  05E5
3745  05E6
3746  05E7
3747  05E8
3748  05E9
3749  05EA
3750  05EB
3751  05EC
3752  05ED
3753  05EE
3754  05EF
3755  05F0
3756  05F1
3757  05F2
3758  05F3
3759  05F4
3760  05F5
3761  05F6
3762  05F7
3763  05F8
3764  05F9
3765  05FA
3766  05FB
3767  05FC
3768  05FD
3769  05FE
3770  05FF
3771  0600
3772  0601
3773  0602
3774  0603
3775  0604
3776  0605
3777  0606
3778  0607
3779  0608
3780  0609
3781  060A
3782  060B
3783  060C
3784  060D
3785  060E
3786  060F
3787  0610
3788  0611
3789  0612
3790  0613
3791  0614
3792  0615
3793  0616
3794  0617
3795  0618
3796  0619
3797  061A
3798  061B
3799  061C
3800  061D
3801  061E
3802  061F
3803  0620
3804  0621
3805  0622
3806  0623
3807  0624
3808  0625
3809  0626
3810  0627
3811  0628
3812  0629
3813  062A
3814  062B
3815  062C
3816  062D
3817  062E
3818  062F
3819  0630
3820  0631
3821  0632
3822  0633
3823  0634
3824  0635
3825  0636
3826  0637
3827  0638
3828  0639
3829  063A
3830  063B
3831  063C
3832  063D
3833  063E
3834  063F
3835  0640
3836  0641
3837  0642
3838  0643
3839  0644
3840  0645
3841  0646
3842  0647
3843  0648
3844  0649
3845  064A
3846  064B
3847  064C
3848  064D
3849  064E
3850  064F
3851  0650
3852  0651
3853  0652
3854  0653
3855  0654
3856  0655
3857  0656
3858  0657
3859  0658
3860  0659
3861  065A
3862  065B
3863  065C
3864  065D
3865  065E
3866  065F
3867  0660
3868  0661
3869  0662
3870  0663
3871  0664
3872  0665
3873  0666
3874  0667
3875  0668
3876  0669
3877  066A
3878  066B
3879  066C
3880  066D
3881  066E
003882  000181        
003883  000182  var stringsCV[4] := [0, 0, 0, 0], hstrings ;
3884  0375
3885  0376
3886  0377
3887  0378
3888  0379
3889  037A
3890  037B
3891  037C
003892  000183  var scTracebuf[8] ;   // each scope has 8 entries
003893  000184  var scCurpos[1] := [0] ;
3894  0377
3895  0378
003896  000185  var sc0Oldval1[219], sc0Newval1[219]  ;
003897  000186  // Start P2.inc
003898  000187  var oObjects[MaxTotObjects+1] ;                 // address of objects
003899  000188  var CurrentForm, oldn, ImageTouched ;
003900  000189  var TouchXpos, TouchYpos ;
003901  000190  var GObjectType, TouchState, CurInputData, pInputIndex ;
003902  000191  var comRX[40], cmd[CMDLenMAX] ;
003903  000192        
003904  000193  var InputCS, OutputCS ;
003905  000194        
003906  000195  // > ? Constant/Global/Data ? <
003907  000196        
003908  000197  func seroutCS(var op)
003909  000198      serout(op) ;
003910  000199      OutputCS ^= op ;
003911  000200  endfunc
003912  000201        
003913  000202  func nak0()
003914  000203      serout(NAK) ;
003915  000204      InputCS := 0 ;
003916  000205  endfunc
003917  000206        
003918  000207  func seroutOcs()
003919  000208      serout(OutputCS) ;
003920  000209      OutputCS := 0 ;
003921  000210  endfunc
003922  000211        
003923  000212  func SendReport(var id, var objt, var objn, var val)
003924  000213      seroutCS(id) ;
003925  000214      seroutCS(objt) ;
003926  000215      seroutCS(objn) ;
003927  000216      seroutCS(val >> 8) ; // first 8 bits
003928  000217      seroutCS(val) ;
003929  000218      seroutOcs() ;
003930  000219  endfunc
003931  000220        
003932  000221  func TMul(var p1, var p2, var p3)
003933  000222      var var32[2], var322[2] ;
003934  000223      umul_1616(var32, p1, *(CurInputData+p2)) ;
003935  000224      umul_1616(var322, var32[1], *(CurInputData+p3)) ;
003936  000225      umul_1616(var32, var32[0], *(CurInputData+p3)) ;
003937  000226      return(var32[1] + var322[0]) ;
003938  000227  endfunc
003939  000228        
003940  000229  func ReadObject(var ObjectType, var ObjectIdx)
003941  000230      var j, k, Objects ;
003942  000231      Objects := *(oObjects+ObjectType) ;
003943  000232        
003944  000233      j := 2 + ObjectIdx * 2 + Objects ;
003945  000234       if (ObjectType == tForm)
003946  000235          k := CurrentForm ;
003947  000236      else if (ObjectType == tStrings)
003948  000237          k := stringsCV[ObjectIdx];
003949  000238          else
003950  000239          k := img_GetWord(hndl, *j, IMAGE_INDEX);
003951  000240          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
003952  000241                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
003953  000242      endif
003954  000243      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
003955  000244  endfunc
003956  000245        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Scope4.inc

003957  000246  #inherit "Scope4.inc"
003958  000246  #inherit "Scope4.inc"
003959  000001        
003960  000006             var *old_y4, var *new_y4, var color4  ) // draw a waveform from a table of vertices
003961  000007      var i, k, xstep, yskip;
003962  000008      var x1, y11, y12, y21, y22, y31, y32, y41, y42, x2, oldx1, oldx2, oldy11, oldy12, oldy21, oldy22, oldy31, oldy32, oldy41, oldy42 ;
003963  000009      var flag ;
003964  000010      flag := old_y1[0] + 1 ;
003965  000011      if(num_points < 2) return;
003966  000012        
003967  000013      xstep := 1;
003968  000014      yskip := 1;
003969  000015      if(xmag > 0)  xstep := xmag+1;
003970  000016      if(xmag < 0)  yskip := ABS(xmag-1);
003971  000017      if (Yamp > 200) Yamp := 200;                                                        // max amplitude
003972  000018        
003973  000019      width += left-1 ;
003974  000020      x1 := left ;                                                                        // set first x point
003975  000021      y11 := yzero - (new_y1[0] * Yamp) / 100;                                            // calc first y point
003976  000022      if (old_y2) y21 := yzero - (new_y2[0] * Yamp) / 100;
003977  000023      if (old_y3) y31 := yzero - (new_y3[0] * Yamp) / 100;
003978  000024      if (old_y4) y41 := yzero - (new_y4[0] * Yamp) / 100;
003979  000025      k := 0 ;
003980  000026      i := 0;
003981  000027        
003982  000028      while(1)
003983  000029          y12 := yzero - ( new_y1[(i+yskip)%num_points] * Yamp) / 100;                    // get next sample
003984  000030          if (old_y2) y22 := yzero - ( new_y2[(i+yskip)%num_points] * Yamp) / 100;
003985  000031          if (old_y3) y32 := yzero - ( new_y3[(i+yskip)%num_points] * Yamp) / 100;
003986  000032          if (old_y4) y42 := yzero - ( new_y4[(i+yskip)%num_points] * Yamp) / 100;
003987  000033          x2 := x1 + xstep;                                                               // next point
003988  000034          if ((flag) && (x2 <= width))
003989  000035              gfx_Line(x1, old_y1[k], x2, old_y1[k+1], colorbg );                         // undraw last
003990  000036              if (old_y2) gfx_Line(x1, old_y2[k], x2, old_y2[k+1], colorbg );
003991  000037              if (old_y3) gfx_Line(x1, old_y3[k], x2, old_y3[k+1], colorbg );
003992  000038              if (old_y4) gfx_Line(x1, old_y4[k], x2, old_y4[k+1], colorbg );
003993  000039          endif
003994  000040          old_y1[k] := y11;                                                               // copy new to old
003995  000041          if (old_y2) old_y2[k] := y21;
003996  000042          if (old_y3) old_y3[k] := y31;
003997  000043          if (old_y4) old_y4[k] := y41;
003998  000044          k++ ;
003999  000045        
004000  000046          if(k>1)
004001  000047              gfx_Line(oldx1, oldy11, oldx2, oldy12, color1);                             // draw new
004002  000048              if (old_y2) gfx_Line(oldx1, oldy21, oldx2, oldy22, color2);
004003  000049              if (old_y3) gfx_Line(oldx1, oldy31, oldx2, oldy32, color3);
004004  000050              if (old_y4) gfx_Line(oldx1, oldy41, oldx2, oldy42, color4);
004005  000051          endif
004006  000052          if(x2 > width) break;
004007  000053          oldx1 := x1;
004008  000054          oldx2 := x2;
004009  000055          oldy11 := y11;
004010  000056          oldy12 := y12;                                                                  // back propogate
004011  000057          oldy21 := y21;
004012  000058          oldy22 := y22;
004013  000059          oldy31 := y31;
004014  000060          oldy32 := y32;
004015  000061          oldy41 := y41;
004016  000062          oldy42 := y42;
004017  000063        
004018  000064          y11 := y12;
004019  000065          y21 := y22;
004020  000066          y31 := y32;
004021  000067          y41 := y42;
004022  000068          x1 := x2;                                                                   // next point
004023  000069          i += yskip;
004024  000070          i %= num_points;                                                            // next sample
004025  000071      wend
004026  000072  endfunc
004027  000073        
004028  000074  func Graticule(var x1, var y1, var x2, var y2, var xinc, var yinc, var color)
004029  000075      var y ;
004030  000076      x1 += xinc ;
004031  000077      while (x1 < x2)
004032  000078          y := y1 + yinc ;
004033  000079          while (y < y2)
004034  000080              gfx_PutPixel(x1, y, color) ;
004035  000081              y += yinc ;
004036  000082          wend
004037  000083          x1 += xinc ;
004038  000084      wend
004039  000085  endfunc
004040  000086        
004041  000087        
004042  000247        
004043  000248  #CONST
004044  000274  #END
004045  000275  var told[4], tnew[4] ;
004046  000276        
004047  000277  func addressTraces(var ObjectIdx, var scopeIdx)
004048  000278      var i, j ;
004049  000279      j := ObjectIdx * 8 ;
004050  000280      for (i := 0; i < 4 ; i++)
004051  000281          if (i < oScopen[scopeIdx+scTraces])
004052  000282              told[i] := scTracebuf[2*i+j] ;
004053  000283              tnew[i] := scTracebuf[2*i+j+1] ;
004054  000284          else
004055  000285              told[i] := 0 ;
004056  000286              tnew[i] := 0 ;
004057  000287          endif
004058  000288      next
004059  000289  endfunc
004060  000290        
004061  000291  func drawScope(var j)
004062  000292      if (oScopen[j+scForm] == CurrentForm)
004063  000293          if (oScopen[j+scGraticuleVis]) Graticule(oScopen[j+scLeft], oScopen[j+scTop], oScopen[j+scRight], oScopen[j+scBottom],
004064  000294                                                    oScopen[j+scGraticuleXinc], oScopen[j+scGraticuleYinc], oScopen[j+scGraticuleCol]) ;
004065  000295          gfx_Scope(oScopen[j+scLeft], oScopen[j+scWidth], oScopen[j+scYZero],
004066  000296                    oScopen[j+scDataPoints], oScopen[j+scXmag],oScopen[j+scYamp], oScopen[j+scColor],
004067  000297                    told[0],tnew[0],oScopen[j+scTrace1Col], told[1],tnew[1],oScopen[j+scTrace2Col],  told[2],tnew[2],oScopen[j+scTrace3Col],  told[3],tnew[3],oScopen[j+scTrace4Col]
004068  000298                    );
004069  000299          if (oScopen[j+scYLineVis]) gfx_Hline(oScopen[j+scYLineForm], oScopen[j+scLeft], oScopen[j+scRight], oScopen[j+scYLineCol]) ;
004070  000300      endif
004071  000301  endfunc
004072  000302        
004073  000303  func doScope(var ObjectIdx, var NewVal)
004074  000304      var curarr, curtrace, i, j, *p ;
004075  000305      j := ObjectIdx * SCOPEENTS ;
004076  000306      curarr   := scCurpos[ObjectIdx] / oScopen[j+scTraces] ;
004077  000307      curtrace := scCurpos[ObjectIdx] % oScopen[j+scTraces] ;
004078  000308      addressTraces(ObjectIdx, j) ;
004079  000309      p := tnew[curtrace] ;
004080  000310      // move trace
004081  000311      mem_Copy(&p[1], &p[0], (oScopen[j+scDataPoints]-1)*2);    // this will only work in R35 and above PmmC
004082  000312      p[oScopen[j+scDataPoints]-1] := NewVal ;
004083  000313      if (   (curtrace == oScopen[j+scTraces]-1)
004084  000314          && (curarr == oScopen[j+scRefreshInc]-1 ) )
004085  000315          drawScope(j) ;
004086  000316          scCurpos[ObjectIdx] := 0 ;
004087  000317      else
004088  000318          scCurpos[ObjectIdx]++ ;
004089  000319      endif
004090  000320  endfunc
004091  000321        
004092  000322  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
004093  000323      var i, j, k, Objects ;
004094  000324      ObjectType &= 0x3f ;
004095  000325      if (ObjectType == tForm)
004096  000326          ActivateForm(ObjectIdx) ;
004097  000327      else if (ObjectType == tScope)
004098  000328          doScope(ObjectIdx, NewVal) ;
004099  000329      else
004100  000330          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
004101  000331          i := *(Objects) ;
004102  000332          switch (ObjectType)
004103  000333              case tWinButton :
004104  000334                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
004105  000335                  break ;
004106  000336              case t4Dbutton :
004107  000337                  j := InputControls[o4Dbuttons[ObjectIdx+1]] ;
004108  000338                  break ;
004109  000339              default : j := -1 ;
004110  000340          endswitch
004111  000341          if (j != -1)
004112  000342              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
004113  000343              NewVal := NewVal << 1 ;
004114  000344              if (OVF())      // button group index change
004115  000345                  if (*(j+InputData+Ofs_IPD_P1))
004116  000346                      k &= 1 ;    // mask off old group index for momentary
004117  000347                  else
004118  000348                      k &= 3 ;    // mask off old group index for toggle
004119  000349                  endif
004120  000350              else            // normal set
004121  000351                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
004122  000352                  k &= 0xfffc ;    // retain only group index for state set
004123  000353              endif
004124  000354              NewVal |= k ;
004125  000355          endif
004126  000356           if (ObjectType == tStrings)
004127  000357              PrintStrings(ObjectIdx, NewVal, 0);
004128  000358          else
004129  000359              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
004130  000360              img_Show(hndl, i) ; // will only display if form is current
004131  000361          endif
004132  000362      endif
004133  000363  endfunc
004134  000364        
004135  000365  func TurnOffButtons(var group)
004136  000366      var j, k, l;
004137  000367      for (j := 0; j < nInputs; j++)
004138  000368          k := j*IPDatasize ;
004139  000369          if (*(InputData+k+Ofs_IPD_P2) == group)
004140  000370              l := -1 ;
004141  000371               if (*(InputData+k) == t4Dbutton)
004142  000372                  l := o4Dbuttons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
004143  000373                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
004144  000374                  img_Show(hndl, l);      // only shows on current form
004145  000375              else if (*(InputData+k) == tWinButton)
004146  000376                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
004147  000377                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
004148  000378                  img_Show(hndl, l);      // only shows on current form
004149  000379              endif
004150  000380          endif
004151  000381      next
004152  000382  endfunc
004153  000383        
004154  000384        
004155  000385        
004156  000386        
004157  000387  func ActivateForm(var newform)
004158  000388      var i, j, *p ;
004159  000389        
004160  000390      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
004161  000391          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
004162  000392              if (img_GetWord(hndl, i, IMAGE_TAG))
004163  000393                  img_Disable(hndl,i) ;
004164  000394              endif
004165  000395          next
004166  000396      endif
004167  000397      CurrentForm := newform ;
004168  000398      // display newform image or clear to image color
004169  000399      if (FormBGcolors[CurrentForm] != ColorBGimage)
004170  000400          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
004171  000401          gfx_Cls() ;
004172  000402          DoGFXObjects() ;                                    // display GFX 'widgets'
004173  000403      endif
004174  000404        
004175  000405      // enable inputs
004176  000406      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
004177  000407          j := img_GetWord(hndl, i, IMAGE_TAG) ;
004178  000408          if (j)
004179  000409              j-- ;
004180  000410              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
004181  000411              //if (j != tKeyboard)
004182  000412              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
004183  000413                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
004184  000414              endif
004185  000415              img_Show(hndl,i) ; // show initialy, if required
004186  000416              if (j == tForm)
004187  000417                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
004188  000418              endif
004189  000419          endif
004190  000420      next
004191  000421      for (i := 0; i < nStrings; i++)
004192  000422          if (stringsCV[i] != -1)
004193  000423              WriteObject(tStrings, i, stringsCV[i]) ;
004194  000424          endif
004195  000425      next
004196  000426      for (i := 0; i < nScopes; i++)
004197  000427          j := i * SCOPEENTS ;
004198  000428          if (oScopen[j+scForm] == CurrentForm)
004199  000429              addressTraces(i,j) ;
004200  000430              p := told[0] ;
004201  000431              p[0] := -1 ; // force init scope
004202  000432              gfx_RectangleFilled(oScopen[j+scLeft], oScopen[j+scTop], oScopen[j+scRight], oScopen[j+scBottom], oScopen[j+scColor]) ;
004203  000433              if (oScopen[j+scGraticuleVis]) Graticule(oScopen[j+scLeft], oScopen[j+scTop], oScopen[j+scRight], oScopen[j+scBottom],
004204  000434                                                        oScopen[j+scGraticuleXinc], oScopen[j+scGraticuleYinc], oScopen[j+scGraticuleCol]) ;
004205  000435              drawScope(i*SCOPEENTS) ;    // draw scope when activating form, may look a bit first time up....
004206  000436              if (oScopen[j+scYLineVis]) gfx_Hline(oScopen[j+scYLineForm], oScopen[j+scLeft], oScopen[j+scRight], oScopen[j+scYLineCol]) ;
004207  000437          endif
004208  000438      next
004209  000439        
004210  000440  endfunc
004211  000441        
004212  000442  func UpdateObjects(var newval)
004213  000443      var IPidx, otherOBJ ;
004214  000444      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
004215  000445        
004216  000446          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
004217  000447              img_Show(hndl, *(pInputIndex));      // only shows on current form
004218  000448          if ((GObjectType == t4Dbutton) || (GObjectType == tUserButton) || (GObjectType == tWinButton))
004219  000449              if (*(CurInputData+Ofs_IPD_P1))
004220  000450                  newval &= 1;
004221  000451              else
004222  000452                  newval &= 3;
004223  000453              endif
004224  000454              if (newval > 1) newval := 1;
004225  000455          endif
004226  000456          IPidx := *(CurInputData+TouchState) ;
004227  000457          while(IPidx != 0)
004228  000458              otherOBJ := IPidx + InputData;
004229  000459              if (*(otherOBJ) == OT_REPORT)
004230  000460          SendReport(REPORT_EVENT, GObjectType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
004231  000461              else if (*(otherOBJ) == OT_MAGIC)
004232  000462                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
004233  000463                  IPidx(newval) ;
004234  000464              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
004235  000465                  if (*(otherOBJ) == OT_ACTIVATE)
004236  000466                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
004237  000467                      GObjectType := tForm ;
004238  000468                  else if (*(otherOBJ) == OT_SETCONST)
004239  000469                      newval := *(otherOBJ+Ofs_IPD_P3) ;
004240  000470                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
004241  000471                  else if (*(otherOBJ) == OT_SETANOTHER)
004242  000472                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
004243  000473                  else if (*(otherOBJ) == OT_PREVFRAME)
004244  000474                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
004245  000475                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
004246  000476                      endif
004247  000477                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
004248  000478                  else if (*(otherOBJ) == OT_NEXTFRAME)
004249  000479                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
004250  000480                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
004251  000481                      endif
004252  000482                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
004253  000483                  else if (*(otherOBJ) == OT_PREVSTRING)
004254  000484                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
004255  000485                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
004256  000486                      endif
004257  000487                  else if (*(otherOBJ) == OT_NEXTSTRING)
004258  000488                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
004259  000489                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
004260  000490                      endif
004261  000491                  endif
004262  000492              endif
004263  000493              IPidx := *(otherOBJ+TouchState) ;
004264  000494          wend
004265  000495      endif
004266  000496  endfunc
004267  000497        
004268  000498  // End P2.inc
004269  000499  func DoGFXObjects()
004270  000500  endfunc
004271  000501        
004272  000502  // Start P3.inc
004273  000503  func main()
004274  000504      var comTX[50], cmdi, i, j, TouchStatus ;
004275  000505        
004276  000506        
004277  000507      gfx_ScreenMode(PORTRAIT) ;
004278  000508        
004279  000509      putstr("Mounting...\n");
004280  000510      if (!(file_Mount()))
004281  000511          while(!(file_Mount()))
004282  000512              putstr("Drive not mounted...");
004283  000513              pause(200);
004284  000514              gfx_Cls();
004285  000515              pause(200);
004286  000516          wend
004287  000517      endif
004288  000518  //    gfx_MoveTo(0, 0);
004289  000519  //    print(mem_Heap()," ") ;
004290  000520  //    gfx_TransparentColour(0x0020);
004291  000521  //    gfx_Transparency(ON);
004292  000522        
004293  000523      // open image control
004294  000524      hndl := file_LoadImageControl("UI1835~1.dat", "UI1835~1.gci", 1);
004295  000525        
004296  000526      // init 'constants'
004297  000527  // End P3.inc
004298  000528        
004299  000529      oObjects[tDipSwitch] := oDipSwitchs ; // dummy as no object there
004300  000530      oObjects[tKnob] := oKnobs ;
004301  000531      oObjects[tRockerSwitch] := oDipSwitchs ; // dummy as no object there
004302  000532      oObjects[tRotarySwitch] := oDipSwitchs ; // dummy as no object there
004303  000533      oObjects[tGSlider] := oDipSwitchs ; // dummy as no object there
004304  000534      oObjects[tTrackbar] := oDipSwitchs ; // dummy as no object there
004305  000535      oObjects[tWinButton] := oWinButtons ;
004306  000536      oObjects[tAngularmeter] := oDipSwitchs ; // dummy as no object there
004307  000537      oObjects[tCoolgauge] := oDipSwitchs ; // dummy as no object there
004308  000538      oObjects[tCustomdigits] := oDipSwitchs ; // dummy as no object there
004309  000539      oObjects[tForm] := oForms ;
004310  000540      oObjects[tGauge] := oDipSwitchs ; // dummy as no object there
004311  000541      oObjects[tImage] := oDipSwitchs ; // dummy as no object there
004312  000542      oObjects[tKeyboard] := oDipSwitchs ; // dummy as no object there
004313  000543      oObjects[tLed] := oDipSwitchs ; // dummy as no object there
004314  000544      oObjects[tLeddigits] := oDipSwitchs ; // dummy as no object there
004315  000545      oObjects[tMeter] := oDipSwitchs ; // dummy as no object there
004316  000546      oObjects[tStrings] := oStringss ;
004317  000547      oObjects[tThermometer] := oDipSwitchs ; // dummy as no object there
004318  000548      oObjects[tUserled] := oUserleds ;
004319  000549      oObjects[tVideo] := oDipSwitchs ; // dummy as no object there
004320  000550      oObjects[tStaticText] := oStaticTexts ;
004321  000551      oObjects[tSounds] := oDipSwitchs ; // dummy as no object there
004322  000552      oObjects[tTimer] := oDipSwitchs ; // dummy as no object there
004323  000553      oObjects[tSpectrum] := oDipSwitchs ; // dummy as no object there
004324  000554      oObjects[tTank] := oDipSwitchs ; // dummy as no object there
004325  000555      oObjects[tUserImages] := oDipSwitchs ; // dummy as no object there
004326  000556      oObjects[tPinOutput] := oDipSwitchs ; // dummy as no object there
004327  000557      oObjects[tPinInput] := oDipSwitchs ; // dummy as no object there
004328  000558      oObjects[t4Dbutton] := o4Dbuttons ;
004329  000559      oObjects[tAniButton] := oDipSwitchs ; // dummy as no object there
004330  000560      oObjects[tColorPicker] := oDipSwitchs ; // dummy as no object there
004331  000561      oObjects[tUserButton] := oDipSwitchs ; // dummy as no object there
004332  000562      hFonts[0] := FONT3 ;
004333  000563      hFonts[1] := FONT3 ;
004334  000564      hFonts[2] := FONT3 ;
004335  000565      hFonts[3] := FONT3 ;
004336  000566      sc0Oldval1[0] := -1 ; // init scope, only needed for first trace
004337  000567      scTracebuf[0] := sc0Oldval1 ;
004338  000568      scTracebuf[1] := sc0Newval1 ;
004339  000569  // Start P4.inc
004340  000570      hstrings := file_Open("UI1835~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
004341  000571      // init comms
004342  000572      com_Init(comRX,CMDLenMAX,0);
004343  000573      com_SetBaud(COM0,960);
004344  000574      com_TXbuffer(comTX, 100, 0);
004345  000575      // tag 'real' objects
004346  000576      for (i := 0; i <= MaxTotObjects; i++)
004347  000577          if (   (i != tSounds)
004348  000578              && (i != tTimer)
004349  000579              && (i != tPinOutput)
004350  000580              && (i != tPinInput) )
004351  000581              TouchXpos := oObjects[i] ;
004352  000582              TouchYpos := *(TouchXpos) ;
004353  000583              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
004354  000584                  oldn := *(TouchXpos+ImageTouched*2) ;
004355  000585                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
004356  000586                  if (oldn != -1)
004357  000587                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
004358  000588                      img_Disable(hndl, oldn) ;
004359  000589                  endif
004360  000590              next
004361  000591          endif
004362  000592      next
004363  000593        
004364  000594      // display initial form
004365  000595      CurrentForm := -1 ;
004366  000596  // End P4.inc
004367  000597  // Start P5.inc
004368  000598      ActivateForm(0) ; // need to change this according to first actual form
004369  000599        
004370  000600  // End P5.inc
004371  000601  // Start P6.inc Picaso
004372  000602      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
004373  000603      oldn := -1 ;
004374  000604      repeat
004375  000605        
004376  000606          // check comms for command, how to NAK invalid command
004377  000607          if (com_Count() != 0)
004378  000608              i := serin() ;
004379  000609              InputCS ^= i ;               // update checksum
004380  000610              if (   (cmdi > 2)
004381  000611                  && (cmd[0] == WRITE_STRU) )
004382  000612                  j := (cmdi-1) >> 1 + 2 ;
004383  000613                  if (j == CMDLenMAX)    // max length exceeded
004384  000614                      nak0() ;
004385  000615                      cmdi := -1 ;
004386  000616                  else if (cmdi & 1)
004387  000617                      cmd[j] := i ;
004388  000618                      if (cmd[2] == 0)    // if string complete
004389  000619                          if (InputCS)
004390  000620                              nak0() ;
004391  000621                          else
004392  000622                              if (cmd[0] == WRITE_STRU)
004393  000623                              cmd[j] := 0 ;                     // terminate it
004394  000624                              PrintStrings(cmd[1], &cmd[3], 1) ;
004395  000625                              serout(ACK) ;
004396  000626                              else
004397  000627                              endif
004398  000628                          endif
004399  000629                          cmdi := -1 ;
004400  000630                      endif
004401  000631                  else
004402  000632                      cmd[j] := cmd[j] << 8 + i ;
004403  000633                      cmd[2]-- ;          // dec length
004404  000634                  endif
004405  000635                  cmdi++ ;
004406  000636              else // not unicode string
004407  000637                  cmd[cmdi++] := i ;
004408  000638                   if (cmd[0] == WRITE_STR)                  // Ansi String
004409  000639                      if (cmdi == CMDLenMAX)      // max length exceeded
004410  000640                          nak0() ;
004411  000641                          cmdi := 0 ;
004412  000642                      else if (cmdi > 2)
004413  000643                          if (cmd[2] == -1)
004414  000644                              if (InputCS)
004415  000645                                  nak0() ;
004416  000646                              else
004417  000647                                  if (cmd[0] == WRITE_STR)
004418  000648                                  cmd[cmdi-1] := 0 ;                     // terminate it
004419  000649                                  PrintStrings(cmd[1], &cmd[3], 1) ;
004420  000650                                  serout(ACK) ;
004421  000651                                  else
004422  000652                                  endif
004423  000653                              endif
004424  000654                              cmdi := 0 ;
004425  000655                          else
004426  000656                              cmd[2]-- ;          // dec length
004427  000657                          endif
004428  000658                      endif
004429  000659                  else if (   (cmd[0] == READ_OBJ)
004430  000660                           && (cmdi == 4)         )
004431  000661                      if (InputCS)
004432  000662                          nak0() ;
004433  000663                      else
004434  000664                          ReadObject(cmd[1], cmd[2]) ;
004435  000665                      endif
004436  000666                      cmdi := 0 ;
004437  000667                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
004438  000668                           && (cmdi == 6)          )
004439  000669                      if (InputCS)
004440  000670                          nak0() ;
004441  000671                      else
004442  000672                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
004443  000673                          serout(ACK) ;
004444  000674                      endif
004445  000675                      cmdi := 0 ;
004446  000676                  else if (   (cmd[0] == WRITE_CONTRAST)
004447  000677                           && (cmdi == 3)         )
004448  000678                      if (InputCS)
004449  000679                          nak0() ;
004450  000680                      else
004451  000681                          gfx_Contrast(cmd[1]) ;
004452  000682                          serout(ACK) ;
004453  000683                      endif
004454  000684                      cmdi := 0 ;
004455  000685                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
004456  000686                      nak0() ;
004457  000687                      cmdi := 0 ;
004458  000688                  endif
004459  000689              endif   // not unicode string
004460  000690          endif   // a character is available
004461  000691        
004462  000692        
004463  000693      // touch code processing
004464  000694        
004465  000695          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
004466  000696          ImageTouched := img_Touched(hndl,-1) ;
004467  000697          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
004468  000698              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
004469  000699                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
004470  000700              endif
004471  000701              if (TouchStatus != TOUCH_RELEASED)        // if not released
004472  000702                  if (oldn != -1)
004473  000703                      ImageTouched := oldn ;
004474  000704                  else
004475  000705                      if (oldn != ImageTouched)
004476  000706                  oldn := ImageTouched ;
004477  000707                          TouchStatus := TOUCH_PRESSED ;
004478  000708                      endif
004479  000709                  endif
004480  000710                  TouchXpos  := touch_Get(TOUCH_GETX);
004481  000711                  TouchYpos  := touch_Get(TOUCH_GETY);
004482  000712                  TouchState := Ofs_IPD_DOWN ;
004483  000713              else
004484  000714                  ImageTouched := oldn ;                     // simulate release of what we touched
004485  000715                  oldn := -1 ;                    // prevent double release
004486  000716                  TouchState := Ofs_IPD_RELEASE ;
004487  000717              endif
004488  000718              if (ImageTouched != -1)
004489  000719                          CurInputData := InputControls[ImageTouched] + InputData;
004490  000720                          GObjectType := *(CurInputData) ;
004491  000721                          i := GObjectType ;
004492  000722                          if (GObjectType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
004493  000723                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
004494  000724              endif
004495  000725          endif
004496  000726   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
004497  000727        
004498  000728          sys_EventsResume() ;
004499  000729      forever
004500  000730        
004501  000731  cDipswitch:
004502  000732        
004503  000733  cKnob:
004504  000734      i := XYposToDegree(TouchXpos-*(CurInputData+Ofs_IPD_P1),      // x - CentreX
004505  000735                         TouchYpos-*(CurInputData+Ofs_IPD_P2)) ;    // y - centreY
004506  000736      if (i < *(CurInputData+Ofs_IPD_P3))                   // anything in the first 'dead zone' is minvalue
004507  000737          i := 0 ;
004508  000738      else
004509  000739          if (i > *(CurInputData+Ofs_IPD_P4))               // anything in the last 'dead zone' is maxvalue
004510  000740              i := *(CurInputData+Ofs_IPD_P5) ;
004511  000741          else
004512  000742              i -= *(CurInputData+Ofs_IPD_P3) ;             // offset by -baseangle
004513  000743          endif
004514  000744      endif
004515  000745  //  i := i * *(input+IPD_P6) / *(input+IPD_P5) ;   // convert degrees to position
004516  000746      i := TMul(i, Ofs_IPD_P6, Ofs_IPD_P7) ;   // convert degrees to position
004517  000747      pInputIndex := oKnobs + *(CurInputData+Ofs_IPD_OBJVIDX) ;
004518  000748      UpdateObjects(i) ;
004519  000749  endsub ;
004520  000750        
004521  000751  cRockerswitch:
004522  000752        
004523  000753  cRotaryswitch:
004524  000754        
004525  000755  cSlider:
004526  000756  cTrackbar:
004527  000757        
004528  000758  c4DButton:
004529  000759      pInputIndex := o4Dbuttons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
004530  000760      goto gbutton ;
004531  000761  cUserButton:
004532  000762  cWinbutton:
004533  000763      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
004534  000764  gbutton:
004535  000765      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
004536  000766      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
004537  000767          if (TouchStatus == TOUCH_RELEASED)
004538  000768              i &= 0xfffe ;
004539  000769              TouchState == Ofs_IPD_DOWN ;
004540  000770          else
004541  000771              i |= 1 ;
004542  000772              TouchState == Ofs_IPD_RELEASE ;
004543  000773          endif
004544  000774      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
004545  000775          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
004546  000776              if ((i & 3) == 3)
004547  000777                  i &= 0xfffc ;
004548  000778              else
004549  000779                  i++ ;
004550  000780              endif
004551  000781          else
004552  000782              i |= 1 ;                                      // make down regardless of current state
004553  000783          endif
004554  000784      else                        // group action, up all other buttons on touch press, reports 0 for button down
004555  000785          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
004556  000786              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
004557  000787          endif
004558  000788          i := (i & 0xfffc) | 2 ;
004559  000789      endif
004560  000790        
004561  000791      UpdateObjects(i) ;
004562  000792  endsub ;
004563  000793        
004564  000794  cAniButton:
004565  000795        
004566  000796  cColorPicker:
004567  000797        
004568  000798  endfunc
004569  000799  // End P6.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 463 file:UI.4DGenieS)
Notice: local var 'i' in func 'doScope' is never used (line 304 file:UI.4DGenieS)


Symbol Table:
name                             decimal         hex
_1F                                  -40  0xffffffd8 (PmmC func) args[0] r=0  (not used)
__MAXMEM                           14400  0x00003840 (const dword)  (usage 1)
__MAXPROG                          14400  0x00003840 (const dword)  (usage 1)
__PLATFORM                             1  0x00000001 (const dword)  (not used)
ABS                                  -13  0xfffffff3 (PmmC func) args[1] r=1  (usage 9)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                        3543  0x00000dd7 (User func) args[1] r=0  (usage 9)
addressTraces                       5244  0x0000147c (User func) args[2] r=0  (usage 6)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
arctan                                 7  0x00000007arctan                                 7  0x00000007 (mem) byte[101] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 3)
AUDIO_ENABLE                           7  0x00000007 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BACKLITE                               6  0x00000006 (const dword)  (not used)
BASE_IMAGE_DISPLAY_CONTROL            97  0x00000061 (const dword)  (not used)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 15)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (usage 3)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
BUS_0                                  8  0x00000008 (const dword)  (not used)
BUS_1                                  9  0x00000009 (const dword)  (not used)
BUS_2                                 10  0x0000000a (const dword)  (not used)
BUS_3                                 11  0x0000000b (const dword)  (not used)
BUS_4                                 12  0x0000000c (const dword)  (not used)
BUS_5                                 13  0x0000000d (const dword)  (not used)
BUS_6                                 14  0x0000000e (const dword)  (not used)
BUS_7                                 15  0x0000000f (const dword)  (not used)
bus_In                               -45  0xffffffd3 (PmmC func) args[0] r=1  (not used)
bus_Out                              -46  0xffffffd2 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                             -49  0xffffffcf (PmmC func) args[0] r=1  (not used)
bus_Set                              -47  0xffffffd1 (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             5  0x00000005 (const dword)  (not used)
bus_Write                            -48  0xffffffd0 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                            -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS    2806  0x00000af6 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                          -159  0xffffff61 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                           -158  0xffffff62 (PmmC func) args[1] r=1  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
CKMODE_0                               0  0x00000000 (const dword)  (not used)
CKMODE_1                               1  0x00000001 (const dword)  (not used)
CKMODE_2                               2  0x00000002 (const dword)  (not used)
CKMODE_3                               3  0x00000003 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                 1080  0x00000438 (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 6)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COLOUR_MODE                           27  0x0000001b (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63496  0x0000f808 (const dword)  (not used)
com1_Count                          -132  0xffffff7c (PmmC func) args[0] r=1  (not used)
com1_Error                          -134  0xffffff7a (PmmC func) args[0] r=1  (not used)
com1_Full                           -133  0xffffff7b (PmmC func) args[0] r=1  (not used)
com1_Init                           -130  0xffffff7e (PmmC func) args[3] r=0  (not used)
com1_Reset                          -131  0xffffff7d (PmmC func) args[0] r=0  (not used)
com1_Sync                           -135  0xffffff79 (PmmC func) args[0] r=1  (not used)
com1_TXbuffer                       -136  0xffffff78 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -139  0xffffff75 (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -137  0xffffff77 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -138  0xffffff76 (PmmC func) args[1] r=1  (not used)
com_Count                           -122  0xffffff86 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -124  0xffffff84 (PmmC func) args[0] r=1  (not used)
com_Full                            -123  0xffffff85 (PmmC func) args[0] r=1  (not used)
com_Init                            -120  0xffffff88 (PmmC func) args[3] r=0  (usage 3)
com_Reset                           -121  0xffffff87 (PmmC func) args[0] r=0  (not used)
com_SetBaud                         -142  0xffffff72 (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -125  0xffffff83 (PmmC func) args[0] r=1  (not used)
com_TXbuffer                        -126  0xffffff82 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -129  0xffffff7f (PmmC func) args[1] r=1  (not used)
com_TXcount                         -127  0xffffff81 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -128  0xffffff80 (PmmC func) args[1] r=1  (not used)
comRX                               1000  0x000003e8 (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -18  0xffffffee (PmmC func) args[1] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         996  0x000003e4 (mem) word (global)  (usage 57)
CurrentForm                          982  0x000003d6 (mem) word (global)  (usage 48)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                  -285  0xfffffee3 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_Disconnect                     -293  0xfffffedb (PmmC func) args[0] r=0  (not used)
disp_Init                           -143  0xffffff71 (PmmC func) args[0] r=0  (not used)
DISP_POS_PD_1                        128  0x00000080 (const dword)  (not used)
DISP_POS_PD_2                        131  0x00000083 (const dword)  (not used)
disp_ReadWord                       -149  0xffffff6b (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -145  0xffffff6f (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -144  0xffffff70 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -284  0xfffffee4 (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -147  0xffffff6d (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -148  0xffffff6c (PmmC func) args[1] r=0  (not used)
DISPLAY_CONTROL_1                      7  0x00000007 (const dword)  (not used)
DISPLAY_CONTROL_2                      8  0x00000008 (const dword)  (not used)
DISPLAY_CONTROL_3                      9  0x00000009 (const dword)  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                        2897  0x00000b51 (User func) args[0] r=0  (usage 6)
doScope                             4713  0x00001269 (User func) args[2] r=0  (usage 3)
DOWN                                   0  0x00000000 (const dword)  (not used)
drawScope                           4913  0x00001331 (User func) args[1] r=0  (usage 6)
DRIVER_OUTPUT_CONTROL                  1  0x00000001 (const dword)  (not used)
DRIVER_OUTPUT_CONTROL_2               96  0x00000060 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
ENTRY_MODE                             3  0x00000003 (const dword)  (not used)
EVE_SP                              -282  0xfffffee6 (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                           -283  0xfffffee5 (PmmC func) args[0] r=1  (not used)
EXTERNAL_DISPLAY_INTERFACE_CONTROL_1      12  0x0000000c (const dword)  (not used)
EXTERNAL_DISPLAY_INTERFACE_CONTROL_2      15  0x0000000f (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -232  0xffffff18 (PmmC func) args[1] r=1  (not used)
file_Count                          -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -247  0xffffff09 (PmmC func) args[1] r=1  (not used)
file_Error                          -225  0xffffff1f (PmmC func) args[0] r=1  (not used)
file_Exec                           -251  0xffffff05 (PmmC func) args[2] r=1  (not used)
file_Exists                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
file_FindNext                       -229  0xffffff1b (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -242  0xffffff0e (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -246  0xffffff0a (PmmC func) args[3] r=1  (not used)
file_GetW                           -244  0xffffff0c (PmmC func) args[1] r=1  (usage 3)
file_Image                          -239  0xffffff11 (PmmC func) args[3] r=1  (not used)
file_Index                          -235  0xffffff15 (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -249  0xffffff07 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -252  0xffffff04 (PmmC func) args[3] r=1  (usage 3)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -253  0xffffff03 (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -231  0xffffff19 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -255  0xffffff01 (PmmC func) args[1] r=1  (not used)
file_PutC                           -241  0xffffff0f (PmmC func) args[2] r=1  (not used)
file_PutS                           -245  0xffffff0b (PmmC func) args[2] r=1  (not used)
file_PutW                           -243  0xffffff0d (PmmC func) args[2] r=1  (not used)
file_Read                           -233  0xffffff17 (PmmC func) args[3] r=1  (not used)
file_Rewind                         -248  0xffffff08 (PmmC func) args[1] r=1  (not used)
file_Run                            -250  0xffffff06 (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -240  0xffffff10 (PmmC func) args[5] r=1  (not used)
file_Seek                           -234  0xffffff16 (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_Size                           -238  0xffffff12 (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -236  0xffffff14 (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -254  0xffffff02 (PmmC func) args[0] r=0  (not used)
file_Write                          -237  0xffffff13 (PmmC func) args[3] r=1  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_BlockErase                    -157  0xffffff63 (PmmC func) args[1] r=1  (not used)
flash_BulkErase                     -156  0xffffff64 (PmmC func) args[0] r=0  (not used)
flash_ID                            -155  0xffffff65 (PmmC func) args[0] r=1  (not used)
flash_SIG                           -154  0xffffff66 (PmmC func) args[0] r=1  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
FONT1                                  0  0x00000000 (const dword)  (not used)
FONT2                                  1  0x00000001 (const dword)  (not used)
FONT3                                  2  0x00000002 (const dword)  (usage 12)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                         816  0x00000330FormBGcolors                         816  0x00000330 (mem) word[5] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                         118  0x00000076FormEndIndex                         118  0x00000076 (mem) word[5] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 6)
FormStartIndex                       108  0x0000006cFormStartIndex                       108  0x0000006c (mem) word[5] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_CYCLE_CONTROL                   10  0x0000000a (const dword)  (not used)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FRAME_MAKER_POSITION                  13  0x0000000d (const dword)  (not used)
FRAME_RATE_CONTROL                    43  0x0000002b (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (usage 3)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
GAMMA_CONTROL_1                       48  0x00000030 (const dword)  (not used)
GAMMA_CONTROL_10                      61  0x0000003d (const dword)  (not used)
GAMMA_CONTROL_2                       49  0x00000031 (const dword)  (not used)
GAMMA_CONTROL_3                       50  0x00000032 (const dword)  (not used)
GAMMA_CONTROL_4                       53  0x00000035 (const dword)  (not used)
GAMMA_CONTROL_5                       54  0x00000036 (const dword)  (not used)
GAMMA_CONTROL_6                       55  0x00000037 (const dword)  (not used)
GAMMA_CONTROL_7                       56  0x00000038 (const dword)  (not used)
GAMMA_CONTROL_8                       57  0x00000039 (const dword)  (not used)
GAMMA_CONTROL_9                       60  0x0000003c (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
Gen4_ULCD_24PT                         0  0x00000000 (const ??? 0)  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                         -85  0xffffffab (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -104  0xffffff98 (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -103  0xffffff99 (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                         -92  0xffffffa4 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                            -74  0xffffffb6 (PmmC func) args[2] r=0  (not used)
gfx_Bullet                           -71  0xffffffb9 (PmmC func) args[1] r=0  (not used)
gfx_Button                           -80  0xffffffb0 (PmmC func) args[9] r=0  (not used)
GFX_BUTTON_BACKGROUND                 64  0x00000040 (const dword)  (not used)
GFX_BUTTON_FOREGROUND                 63  0x0000003f (const dword)  (not used)
GFX_BUTTON_MODE                       65  0x00000041 (const dword)  (not used)
gfx_ChangeColour                     -76  0xffffffb4 (PmmC func) args[2] r=0  (not used)
gfx_Circle                           -61  0xffffffc3 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                     -62  0xffffffc2 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                         -94  0xffffffa2 (PmmC func) args[1] r=0  (usage 6)
gfx_ClipWindow                       -75  0xffffffb5 (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                              -51  0xffffffcd (PmmC func) args[0] r=0  (usage 6)
gfx_ColourMode                      -102  0xffffff9a (PmmC func) args[1] r=1  (not used)
gfx_Contrast                        -100  0xffffff9c (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                              -70  0xffffffba (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                          -78  0xffffffb2 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                    -79  0xffffffb1 (PmmC func) args[5] r=0  (not used)
gfx_FrameDelay                       -97  0xffffff9f (PmmC func) args[1] r=1  (not used)
gfx_Get                              -90  0xffffffa6 (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                         -64  0xffffffc0 (PmmC func) args[2] r=1  (not used)
GFX_HILIGHT_BACKGROUND                61  0x0000003d (const dword)  (not used)
GFX_HILIGHT_FOREGROUND                62  0x0000003e (const dword)  (not used)
GFX_HILITE_LINE                       58  0x0000003a (const dword)  (not used)
gfx_Hline                            -57  0xffffffc7 (PmmC func) args[4] r=1  (usage 6)
gfx_IncX                             -72  0xffffffb8 (PmmC func) args[0] r=1  (not used)
gfx_IncY                             -73  0xffffffb7 (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_SELECTION                    60  0x0000003c (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
GFX_LEFT_GUTTER_WIDTH                 68  0x00000044 (const dword)  (not used)
gfx_Line                             -56  0xffffffc8 (PmmC func) args[5] r=0  (usage 24)
GFX_LINE_COUNT                        59  0x0000003b (const dword)  (not used)
gfx_LinePattern                     -101  0xffffff9b (PmmC func) args[1] r=1  (not used)
gfx_LineRel                          -55  0xffffffc9 (PmmC func) args[2] r=0  (not used)
gfx_LineTo                           -54  0xffffffca (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                          -53  0xffffffcb (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                           -52  0xffffffcc (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                     -93  0xffffffa3 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                            -67  0xffffffbd (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                        -66  0xffffffbe (PmmC func) args[2] r=0  (not used)
gfx_Origin                           -89  0xffffffa7 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                    -99  0xffffff9d (PmmC func) args[1] r=1  (not used)
gfx_Panel                            -81  0xffffffaf (PmmC func) args[6] r=0  (not used)
gfx_PenSize                          -91  0xffffffa5 (PmmC func) args[1] r=1  (not used)
GFX_PIXEL_SHIFT                       70  0x00000046 (const dword)  (not used)
gfx_Polygon                          -69  0xffffffbb (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                    -88  0xffffffa8 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                         -68  0xffffffbc (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                         -63  0xffffffc1 (PmmC func) args[3] r=0  (usage 3)
GFX_RECT_X1                           71  0x00000047 (const dword)  (not used)
GFX_RECT_X2                           73  0x00000049 (const dword)  (not used)
GFX_RECT_Y1                           72  0x00000048 (const dword)  (not used)
GFX_RECT_Y2                           74  0x0000004a (const dword)  (not used)
gfx_Rectangle                        -59  0xffffffc5 (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                  -60  0xffffffc4 (PmmC func) args[5] r=0  (usage 9)
gfx_RGBto565                         -84  0xffffffac (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
GFX_RIGHT_GUTTER_WIDTH                69  0x00000045 (const dword)  (not used)
gfx_Scope                           5438  0x0000153e (User func) args[19] r=0  (usage 3)
gfx_ScreenCopyPaste                  -83  0xffffffad (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                       -98  0xffffff9e (PmmC func) args[1] r=1  (usage 3)
gfx_Selection                        -86  0xffffffaa (PmmC func) args[3] r=0  (not used)
gfx_Set                              -50  0xffffffce (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                    -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
gfx_Slider                           -82  0xffffffae (PmmC func) args[8] r=1  (not used)
GFX_STATUSBAR_HEIGHT                  67  0x00000043 (const dword)  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOOLBAR_HEIGHT                    66  0x00000042 (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                     -96  0xffffffa0 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour                -95  0xffffffa1 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                         -65  0xffffffbf (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                   -87  0xffffffa9 (PmmC func) args[7] r=0  (not used)
gfx_Vline                            -58  0xffffffc6 (PmmC func) args[4] r=1  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -105  0xffffff97 (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -106  0xffffff96 (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GObjectType                          992  0x000003e0 (mem) word (global)  (usage 24)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAM_ADDRESS_SET_X                    32  0x00000020 (const dword)  (not used)
GRAM_ADDRESS_SET_Y                    33  0x00000021 (const dword)  (not used)
GRAM_DATA_READ                        34  0x00000022 (const dword)  (not used)
GRAM_DATA_WRITE                       34  0x00000022 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
Graticule                           5367  0x000014f7 (User func) args[7] r=0  (usage 6)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[4] (global)  (usage 15)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                              -214  0xffffff2a (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 90)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOR_WINDOW_BEG                        80  0x00000050 (const dword)  (not used)
HOR_WINDOW_END                        81  0x00000051 (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                              18  0x00000012 (mem) word (global)  (usage 12)
I2C                                63520  0x0000f820 (const dword)  (not used)
I2C_Ack                             -169  0xffffff57 (PmmC func) args[0] r=0  (not used)
I2C_AckPoll                         -172  0xffffff54 (PmmC func) args[1] r=1  (not used)
I2C_AckStatus                       -171  0xffffff55 (PmmC func) args[0] r=0  (not used)
I2C_Close                           -163  0xffffff5d (PmmC func) args[0] r=0  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_Getn                            -175  0xffffff51 (PmmC func) args[2] r=1  (not used)
I2C_Gets                            -174  0xffffff52 (PmmC func) args[2] r=1  (not used)
I2C_Idle                            -173  0xffffff53 (PmmC func) args[0] r=0  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_Nack                            -170  0xffffff56 (PmmC func) args[0] r=0  (not used)
I2C_Open                            -162  0xffffff5e (PmmC func) args[1] r=0  (not used)
I2C_Putn                            -177  0xffffff4f (PmmC func) args[2] r=1  (not used)
I2C_Puts                            -176  0xffffff50 (PmmC func) args[1] r=1  (not used)
I2C_Read                            -167  0xffffff59 (PmmC func) args[0] r=1  (not used)
I2C_Restart                         -166  0xffffff5a (PmmC func) args[0] r=1  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I2C_Start                           -164  0xffffff5c (PmmC func) args[0] r=1  (not used)
I2C_Stop                            -165  0xffffff5b (PmmC func) args[0] r=1  (not used)
I2C_Write                           -168  0xffffff58 (PmmC func) args[1] r=1  (not used)
i4Dbutton0                             1  0x00000001 (const ??? 0)  (usage 3)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 3)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
IFONT_OFFSET                           0  0x00000000 (const dword)  (not used)
iKnob0                                12  0x0000000c (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (not used)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 42)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (not used)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (not used)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
ImageTouched                         986  0x000003da (mem) word (global)  (usage 36)
img_ClearAttributes                 -187  0xffffff45 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -181  0xffffff4b (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -180  0xffffff4c (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -179  0xffffff4d (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -184  0xffffff48 (PmmC func) args[3] r=1  (usage 36)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -182  0xffffff4a (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SetAttributes                   -186  0xffffff46 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -178  0xffffff4e (PmmC func) args[4] r=1  (not used)
img_SetWord                         -183  0xffffff49 (PmmC func) args[4] r=1  (usage 15)
img_Show                            -185  0xffffff47 (PmmC func) args[2] r=1  (usage 18)
img_Touched                         -188  0xffffff44 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
INPUT                                  1  0x00000001 (const dword)  (not used)
InputControls                        128  0x00000080InputControls                        128  0x00000080 (mem) word[15] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 9)
InputCS                             1240  0x000004d8 (mem) word (global)  (usage 21)
InputData                            158  0x0000009eInputData                            158  0x0000009e (mem) word[242] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 30)
INTERNAL_TIMING_1                    227  0x000000e3 (const dword)  (not used)
INTERNAL_TIMING_2                    231  0x000000e7 (const dword)  (not used)
INTERNAL_TIMING_3                    239  0x000000ef (const dword)  (not used)
INVERSE                               64  0x00000040 (const dword)  (not used)
IO1_PIN                                1  0x00000001 (const dword)  (not used)
IO2_PIN                                2  0x00000002 (const dword)  (not used)
IO3_PIN                                3  0x00000003 (const dword)  (not used)
IO4_PIN                                4  0x00000004 (const dword)  (not used)
IO5_PIN                                5  0x00000005 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                             -207  0xffffff31 (PmmC func) args[1] r=1  (not used)
isalpha                             -206  0xffffff32 (PmmC func) args[1] r=1  (not used)
isdigit                             -202  0xffffff36 (PmmC func) args[1] r=1  (not used)
islower                             -205  0xffffff33 (PmmC func) args[1] r=1  (not used)
isprint                             -208  0xffffff30 (PmmC func) args[1] r=1  (not used)
isspace                             -209  0xffffff2f (PmmC func) args[1] r=1  (not used)
iStatictext0                           0  0x00000000 (const ??? 0)  (usage 3)
iStatictext1                           2  0x00000002 (const ??? 0)  (usage 3)
iStatictext2                           5  0x00000005 (const ??? 0)  (usage 3)
iStatictext3                          15  0x0000000f (const ??? 0)  (usage 3)
iStatictext4                          16  0x00000010 (const ??? 0)  (usage 3)
iStrings0                            642  0x00000282iStrings0                            642  0x00000282 (mem) word[13] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 3)
iStrings1                            668  0x0000029ciStrings1                            668  0x0000029c (mem) word[13] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 3)
iStrings2                            694  0x000002b6iStrings2                            694  0x000002b6 (mem) word[13] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 3)
iStrings3                            720  0x000002d0iStrings3                            720  0x000002d0 (mem) word[13] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 3)
isupper                             -204  0xffffff34 (PmmC func) args[1] r=1  (not used)
iswhite                             -210  0xffffff2e (PmmC func) args[1] r=1  (not used)
isxdigit                            -203  0xffffff35 (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -198  0xffffff3a (PmmC func) args[1] r=0  (not used)
iUserled0                              3  0x00000003 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                            4  0x00000004 (const ??? 0)  (usage 3)
iWinbutton1                            6  0x00000006 (const ??? 0)  (usage 3)
iWinbutton2                            7  0x00000007 (const ??? 0)  (usage 3)
iWinbutton3                            8  0x00000008 (const ??? 0)  (usage 3)
iWinbutton4                            9  0x00000009 (const ??? 0)  (usage 3)
iWinbutton5                           10  0x0000000a (const ??? 0)  (usage 3)
iWinbutton6                           11  0x0000000b (const ??? 0)  (usage 3)
iWinbutton7                           13  0x0000000d (const ??? 0)  (usage 3)
iWinbutton8                           14  0x0000000e (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                  826  0x0000033akKeyboardKeystrokes                  826  0x0000033a (mem) word[1] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (not used)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
LCD_DRIVING_CONTROL                    2  0x00000002 (const dword)  (not used)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (usage 3)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                              -213  0xffffff2b (PmmC func) args[1] r=1  (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                1009  0x000003f1 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -15  0xfffffff1 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
MEDIA_ADDRESS_MW                      92  0x0000005c (const dword)  (not used)
MEDIA_ADDRESS_UW                      93  0x0000005d (const dword)  (not used)
media_Flush                         -118  0xffffff8a (PmmC func) args[0] r=1  (not used)
media_Image                         -117  0xffffff8b (PmmC func) args[2] r=0  (not used)
media_Init                          -119  0xffffff89 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -111  0xffffff91 (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -113  0xffffff8f (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -114  0xffffff8e (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                      124  0x0000007c (const dword)  (not used)
MEDIA_SECTOR_LO                      123  0x0000007b (const dword)  (not used)
media_SetAdd                        -109  0xffffff93 (PmmC func) args[2] r=0  (not used)
media_SetSector                     -110  0xffffff92 (PmmC func) args[2] r=0  (not used)
media_Video                         -107  0xffffff95 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -108  0xffffff94 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -115  0xffffff8d (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
media_WrSector                      -112  0xffffff90 (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -217  0xffffff27 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -218  0xffffff26 (PmmC func) args[1] r=1  (not used)
mem_Compare                         -224  0xffffff20 (PmmC func) args[3] r=1  (not used)
mem_Copy                            -223  0xffffff21 (PmmC func) args[3] r=1  (usage 3)
mem_Free                            -220  0xffffff24 (PmmC func) args[1] r=1  (not used)
mem_Heap                            -221  0xffffff23 (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -219  0xffffff25 (PmmC func) args[2] r=1  (not used)
mem_Set                             -222  0xffffff22 (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -14  0xfffffff2 (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                                6454  0x00001936 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                               22  0x00000016 (const dword)  (usage 3)
nObjects                              17  0x00000011 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
nScopes                                1  0x00000001 (const dword)  (usage 3)
nStrings                               4  0x00000004 (const dword)  (usage 3)
o4Dbuttons                           812  0x0000032co4Dbuttons                           812  0x0000032c (mem) word[2] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 12)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oDipSwitchs                          746  0x000002eaoDipSwitchs                          746  0x000002ea (mem) word[1] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 78)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                               772  0x00000304oForms                               772  0x00000304 (mem) word[6] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (not used)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (not used)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (not used)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (not used)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (not used)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 18)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 18)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 51)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 15)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 6)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 12)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 21)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (usage 3)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oKnobs                               748  0x000002ecoKnobs                               748  0x000002ec (mem) word[2] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 6)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oldn                                 984  0x000003d8 (mem) word (global)  (usage 42)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             914  0x00000392 (mem) word[34] (global)  (usage 108)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oScopen                              830  0x0000033eoScopen                              830  0x0000033e (mem) word[24] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 153)
oScopes                              810  0x0000032aoScopes                              810  0x0000032a (mem) word[1] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (not used)
oStaticTexts                         798  0x0000031eoStaticTexts                         798  0x0000031e (mem) word[6] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 3)
oStringss                            784  0x00000310oStringss                            784  0x00000310 (mem) word[5] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 27)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 12)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oUserleds                            794  0x0000031aoUserleds                            794  0x0000031a (mem) word[2] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OUTPUT                                 0  0x00000000 (const dword)  (not used)
OutputCS                            1242  0x000004da (mem) word (global)  (usage 9)
OVF                                  -21  0xffffffeb (PmmC func) args[0] r=1  (usage 3)
oWinButtons                          752  0x000002f0oWinButtons                          752  0x000002f0 (mem) word[10] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (usage 12)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_INTERFACE_CONTROL_1            144  0x00000090 (const dword)  (not used)
PANEL_INTERFACE_CONTROL_2            146  0x00000092 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PICASO                                 1  0x00000001 (const dword)  (usage 3)
PICASO_FUNCTIONS                       0  0x00000000 (const ??? 0)  (not used)
pin_HI                               -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
pin_LO                               -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
pin_Read                             -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
pin_Set                              -41  0xffffffd7 (PmmC func) args[2] r=1  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          998  0x000003e6 (mem) word (global)  (usage 21)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -12  0xfffffff4 (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (usage 3)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
POWER_CONTROL_1                       16  0x00000010 (const dword)  (not used)
POWER_CONTROL_2                       17  0x00000011 (const dword)  (not used)
POWER_CONTROL_3                       18  0x00000012 (const dword)  (not used)
POWER_CONTROL_4                       19  0x00000013 (const dword)  (not used)
POWER_CONTROL_7                       41  0x00000029 (const dword)  (not used)
PrintStrings                        6489  0x00001959 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
RAM_END_PD_1                         130  0x00000082 (const dword)  (not used)
RAM_END_PD_2                         133  0x00000085 (const dword)  (not used)
RAM_START_PD_1                       129  0x00000081 (const dword)  (not used)
RAM_START_PD_2                       132  0x00000084 (const dword)  (not used)
RAND                                 -19  0xffffffed (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                          6180  0x00001824 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (usage 3)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
reserved                            -294  0xfffffeda (PmmC func) args[0] r=0  (not used)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                    828  0x0000033crKeyboardRoutines                    828  0x0000033c (mem) word[1] (member of C:\ReflowOven\4D-Display-UI\UI.4DWork\UI.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (usage 3)
RXMODE_0                               0  0x00000000 (const dword)  (not used)
RXMODE_1                               1  0x00000001 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
sc0Newval1                           476  0x000001dc (mem) word[219] (global)  (usage 3)
sc0Oldval1                            38  0x00000026 (mem) word[219] (global)  (usage 6)
SCALING_CONTROL                        4  0x00000004 (const dword)  (not used)
scBottom                              21  0x00000015 (const ??? 0)  (usage 9)
scColor                                0  0x00000000 (const ??? 0)  (usage 6)
scCurpos                              36  0x00000024 (mem) word[1] (global)  (usage 12)
scDataPoints                          22  0x00000016 (const ??? 0)  (usage 9)
scForm                                19  0x00000013 (const ??? 0)  (usage 6)
scGraticuleCol                         1  0x00000001 (const ??? 0)  (usage 6)
scGraticuleVis                         2  0x00000002 (const ??? 0)  (usage 6)
scGraticuleXinc                        3  0x00000003 (const ??? 0)  (usage 6)
scGraticuleYinc                        4  0x00000004 (const ??? 0)  (usage 6)
scLeft                                 5  0x00000005 (const ??? 0)  (usage 18)
SCOPEENTS                             24  0x00000018 (const ??? 0)  (usage 9)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
scRefreshInc                           6  0x00000006 (const ??? 0)  (usage 3)
scRight                               20  0x00000014 (const ??? 0)  (usage 15)
scTop                                  7  0x00000007 (const ??? 0)  (usage 9)
scTrace1Col                            8  0x00000008 (const ??? 0)  (usage 3)
scTrace2Col                            9  0x00000009 (const ??? 0)  (usage 3)
scTrace3Col                           10  0x0000000a (const ??? 0)  (usage 3)
scTrace4Col                           11  0x0000000b (const ??? 0)  (usage 3)
scTracebuf                            20  0x00000014 (mem) word[8] (global)  (usage 12)
scTraces                              12  0x0000000c (const ??? 0)  (usage 12)
scWidth                               13  0x0000000d (const ??? 0)  (usage 3)
scXmag                                14  0x0000000e (const ??? 0)  (usage 3)
scYamp                                15  0x0000000f (const ??? 0)  (usage 3)
scYLineCol                            17  0x00000011 (const ??? 0)  (usage 6)
scYLineForm                           16  0x00000010 (const ??? 0)  (usage 6)
scYLineVis                            18  0x00000012 (const ??? 0)  (usage 6)
scYZero                               23  0x00000017 (const ??? 0)  (usage 3)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -20  0xffffffec (PmmC func) args[1] r=0  (not used)
SELECT                                 3  0x00000003 (const dword)  (not used)
SELECT_MULTIPLE                        4  0x00000004 (const dword)  (not used)
SendReport                          6387  0x000018f3 (User func) args[4] r=0  (usage 6)
serin                                 -1  0xffffffff (PmmC func) args[0] r=1  (usage 3)
serin1                              -140  0xffffff74 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                                -3  0xfffffffd (PmmC func) args[1] r=0  (usage 21)
serout1                             -141  0xffffff73 (PmmC func) args[1] r=0  (not used)
seroutCS                            6470  0x00001946 (User func) args[1] r=0  (usage 15)
seroutOcs                           6437  0x00001925 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                               -4  0xfffffffc (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -17  0xffffffef (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -258  0xfffffefe (PmmC func) args[1] r=0  (not used)
snd_Continue                        -261  0xfffffefb (PmmC func) args[0] r=0  (not used)
snd_Pause                           -260  0xfffffefc (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -257  0xfffffeff (PmmC func) args[1] r=1  (not used)
snd_Playing                         -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
snd_Stop                            -259  0xfffffefd (PmmC func) args[0] r=0  (not used)
snd_Volume                          -256  0xffffff00 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
spi_Disable                         -153  0xffffff67 (PmmC func) args[0] r=0  (not used)
SPI_FAST                               0  0x00000000 (const dword)  (not used)
spi_Init                            -150  0xffffff6a (PmmC func) args[3] r=0  (not used)
SPI_MED                                1  0x00000001 (const dword)  (not used)
spi_Read                            -151  0xffffff69 (PmmC func) args[0] r=1  (not used)
SPI_SLOW                               2  0x00000002 (const dword)  (not used)
spi_Write                           -152  0xffffff68 (PmmC func) args[1] r=0  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -22  0xffffffea (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
str_Cat                             -278  0xfffffeea (PmmC func) args[2] r=1  (not used)
str_CatN                            -279  0xfffffee9 (PmmC func) args[3] r=1  (not used)
str_Copy                            -287  0xfffffee1 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -288  0xfffffee0 (PmmC func) args[3] r=1  (not used)
str_Find                            -274  0xfffffeee (PmmC func) args[2] r=1  (not used)
str_FindI                           -275  0xfffffeed (PmmC func) args[2] r=1  (not used)
str_GetByte                         -268  0xfffffef4 (PmmC func) args[1] r=1  (not used)
str_GetC                            -267  0xfffffef5 (PmmC func) args[2] r=1  (not used)
str_GetD                            -264  0xfffffef8 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -266  0xfffffef6 (PmmC func) args[2] r=1  (not used)
str_GetW                            -265  0xfffffef7 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -269  0xfffffef3 (PmmC func) args[1] r=1  (not used)
str_Length                          -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
str_Match                           -272  0xfffffef0 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -273  0xfffffeef (PmmC func) args[2] r=1  (not used)
str_Printf                          -277  0xfffffeeb (PmmC func) args[2] r=1  (not used)
str_Ptr                             -263  0xfffffef9 (PmmC func) args[1] r=1  (not used)
str_PutByte                         -270  0xfffffef2 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -271  0xfffffef1 (PmmC func) args[2] r=0  (not used)
strheight                           -161  0xffffff5f (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           5  0x00000005 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                         0  0x00000000 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings3Count                          0  0x00000000 (const dword)  (not used)
Strings3Size                           1  0x00000001 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                      1536  0x00000600 (const dword)  (usage 3)
stringsCV                             10  0x0000000a (mem) word[4] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                            -160  0xffffff60 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -16  0xfffffff0 (PmmC func) args[2] r=0  (usage 3)
sys_DeepSleep                       -295  0xfffffed9 (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -194  0xffffff3e (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -195  0xffffff3d (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -196  0xffffff3c (PmmC func) args[0] r=0  (usage 3)
sys_GetTimer                        -192  0xffffff40 (PmmC func) args[1] r=1  (not used)
sys_SetTimer                        -191  0xffffff41 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -193  0xffffff3f (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -280  0xfffffee8 (PmmC func) args[0] r=1  (not used)
sys_T                               -189  0xffffff43 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -190  0xffffff42 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 24)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 3)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 6)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 3)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
TMul                                6330  0x000018ba (User func) args[3] r=0  (usage 3)
tnew                                1252  0x000004e4 (mem) word[4] (global)  (usage 21)
to                                    -5  0xfffffffb (PmmC func) args[1] r=1  (not used)
told                                1244  0x000004dc (mem) word[4] (global)  (usage 21)
tolower                             -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -199  0xffffff39 (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -201  0xffffff37 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -200  0xffffff38 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           994  0x000003e2 (mem) word (global)  (usage 24)
TouchXpos                            988  0x000003dc (mem) word (global)  (usage 15)
TouchYpos                            990  0x000003de (mem) word (global)  (usage 12)
toupper                             -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
translate                             -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (usage 3)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                      4189  0x0000105d (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 9)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Attributes                       -38  0xffffffda (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -34  0xffffffde (PmmC func) args[1] r=1  (not used)
txt_Delay                            -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -25  0xffffffe7 (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontID                           -27  0xffffffe5 (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
txt_Italic                           -35  0xffffffdd (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -23  0xffffffe9 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -33  0xffffffdf (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -24  0xffffffe8 (PmmC func) args[2] r=0  (not used)
txt_Underline                        -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
txt_Width                            -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -31  0xffffffe1 (PmmC func) args[1] r=1  (not used)
uadd_3232                           -290  0xfffffede (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                           -292  0xfffffedc (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
umul_1616                           -289  0xfffffedf (PmmC func) args[3] r=1  (usage 12)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                        -281  0xfffffee7 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                       2898  0x00000b52 (User func) args[1] r=0  (usage 6)
USER_INITIALIZED_DISPLAY              32  0x00000020 (const dword)  (not used)
usub_3232                           -291  0xfffffedd (PmmC func) args[3] r=1  (not used)
VER_WINDOW_BEG                        82  0x00000052 (const dword)  (not used)
VER_WINDOW_END                        83  0x00000053 (const dword)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 12)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                         4375  0x00001117 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
XYposToDegree                       6967  0x00001b37 (User func) args[2] r=0  (usage 3)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (usage 3)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
